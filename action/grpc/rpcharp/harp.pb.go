// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: harp.proto

package rpcharp

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{0}
}

type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{1}
}

func (x *UUID) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{2}
}

func (x *Result) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// Subnet
type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           *UUID                `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	NetworkIp      string               `protobuf:"bytes,2,opt,name=network_ip,json=networkIp,proto3" json:"network_ip,omitempty"`
	Netmask        string               `protobuf:"bytes,3,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Gateway        string               `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	NextServer     string               `protobuf:"bytes,5,opt,name=next_server,json=nextServer,proto3" json:"next_server,omitempty"`
	NameServer     string               `protobuf:"bytes,6,opt,name=name_server,json=nameServer,proto3" json:"name_server,omitempty"`
	DomainName     string               `protobuf:"bytes,7,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	ServerUuid     string               `protobuf:"bytes,8,opt,name=server_uuid,json=serverUuid,proto3" json:"server_uuid,omitempty"`
	LeaderNodeUuid string               `protobuf:"bytes,9,opt,name=leader_node_uuid,json=leaderNodeUuid,proto3" json:"leader_node_uuid,omitempty"`
	Os             string               `protobuf:"bytes,10,opt,name=os,proto3" json:"os,omitempty"`
	SubnetName     string               `protobuf:"bytes,11,opt,name=subnet_name,json=subnetName,proto3" json:"subnet_name,omitempty"`
	CreatedAt      *timestamp.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{3}
}

func (x *Subnet) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Subnet) GetNetworkIp() string {
	if x != nil {
		return x.NetworkIp
	}
	return ""
}

func (x *Subnet) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *Subnet) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Subnet) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *Subnet) GetNameServer() string {
	if x != nil {
		return x.NameServer
	}
	return ""
}

func (x *Subnet) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *Subnet) GetServerUuid() string {
	if x != nil {
		return x.ServerUuid
	}
	return ""
}

func (x *Subnet) GetLeaderNodeUuid() string {
	if x != nil {
		return x.LeaderNodeUuid
	}
	return ""
}

func (x *Subnet) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Subnet) GetSubnetName() string {
	if x != nil {
		return x.SubnetName
	}
	return ""
}

func (x *Subnet) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type SubnetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet []*Subnet `protobuf:"bytes,1,rep,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *SubnetList) Reset() {
	*x = SubnetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetList) ProtoMessage() {}

func (x *SubnetList) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetList.ProtoReflect.Descriptor instead.
func (*SubnetList) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{4}
}

func (x *SubnetList) GetSubnet() []*Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type GetSubnetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Row    int64   `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
	Page   int64   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetSubnetListRequest) Reset() {
	*x = GetSubnetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetListRequest) ProtoMessage() {}

func (x *GetSubnetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetListRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetListRequest) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{5}
}

func (x *GetSubnetListRequest) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *GetSubnetListRequest) GetRow() int64 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *GetSubnetListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type SubnetNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *SubnetNum) Reset() {
	*x = SubnetNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetNum) ProtoMessage() {}

func (x *SubnetNum) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetNum.ProtoReflect.Descriptor instead.
func (*SubnetNum) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{6}
}

func (x *SubnetNum) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

// AdaptiveIP
type AdaptiveIPSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtIfaceIpAddress string `protobuf:"bytes,1,opt,name=ext_iface_ip_address,json=extIfaceIpAddress,proto3" json:"ext_iface_ip_address,omitempty"`
	Netmask           string `protobuf:"bytes,2,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Gateway           string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	StartIpAddress    string `protobuf:"bytes,4,opt,name=start_ip_address,json=startIpAddress,proto3" json:"start_ip_address,omitempty"`
	EndIpAddress      string `protobuf:"bytes,5,opt,name=end_ip_address,json=endIpAddress,proto3" json:"end_ip_address,omitempty"`
}

func (x *AdaptiveIPSetting) Reset() {
	*x = AdaptiveIPSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveIPSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveIPSetting) ProtoMessage() {}

func (x *AdaptiveIPSetting) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveIPSetting.ProtoReflect.Descriptor instead.
func (*AdaptiveIPSetting) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{7}
}

func (x *AdaptiveIPSetting) GetExtIfaceIpAddress() string {
	if x != nil {
		return x.ExtIfaceIpAddress
	}
	return ""
}

func (x *AdaptiveIPSetting) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *AdaptiveIPSetting) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *AdaptiveIPSetting) GetStartIpAddress() string {
	if x != nil {
		return x.StartIpAddress
	}
	return ""
}

func (x *AdaptiveIPSetting) GetEndIpAddress() string {
	if x != nil {
		return x.EndIpAddress
	}
	return ""
}

type AdaptiveIPAvailableIPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableIp []string `protobuf:"bytes,1,rep,name=available_ip,json=availableIp,proto3" json:"available_ip,omitempty"`
}

func (x *AdaptiveIPAvailableIPList) Reset() {
	*x = AdaptiveIPAvailableIPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveIPAvailableIPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveIPAvailableIPList) ProtoMessage() {}

func (x *AdaptiveIPAvailableIPList) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveIPAvailableIPList.ProtoReflect.Descriptor instead.
func (*AdaptiveIPAvailableIPList) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{8}
}

func (x *AdaptiveIPAvailableIPList) GetAvailableIp() []string {
	if x != nil {
		return x.AvailableIp
	}
	return nil
}

type AdaptiveIPServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUuid     string `protobuf:"bytes,1,opt,name=server_uuid,json=serverUuid,proto3" json:"server_uuid,omitempty"`
	PublicIp       string `protobuf:"bytes,2,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	PrivateIp      string `protobuf:"bytes,3,opt,name=private_ip,json=privateIp,proto3" json:"private_ip,omitempty"`
	PrivateGateway string `protobuf:"bytes,4,opt,name=private_gateway,json=privateGateway,proto3" json:"private_gateway,omitempty"`
	Status         string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt      string `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AdaptiveIPServer) Reset() {
	*x = AdaptiveIPServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveIPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveIPServer) ProtoMessage() {}

func (x *AdaptiveIPServer) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveIPServer.ProtoReflect.Descriptor instead.
func (*AdaptiveIPServer) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{9}
}

func (x *AdaptiveIPServer) GetServerUuid() string {
	if x != nil {
		return x.ServerUuid
	}
	return ""
}

func (x *AdaptiveIPServer) GetPublicIp() string {
	if x != nil {
		return x.PublicIp
	}
	return ""
}

func (x *AdaptiveIPServer) GetPrivateIp() string {
	if x != nil {
		return x.PrivateIp
	}
	return ""
}

func (x *AdaptiveIPServer) GetPrivateGateway() string {
	if x != nil {
		return x.PrivateGateway
	}
	return ""
}

func (x *AdaptiveIPServer) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AdaptiveIPServer) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type AdaptiveIPServerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdaptiveIpServer []*AdaptiveIPServer `protobuf:"bytes,1,rep,name=adaptive_ip_server,json=adaptiveIpServer,proto3" json:"adaptive_ip_server,omitempty"`
}

func (x *AdaptiveIPServerList) Reset() {
	*x = AdaptiveIPServerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveIPServerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveIPServerList) ProtoMessage() {}

func (x *AdaptiveIPServerList) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveIPServerList.ProtoReflect.Descriptor instead.
func (*AdaptiveIPServerList) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{10}
}

func (x *AdaptiveIPServerList) GetAdaptiveIpServer() []*AdaptiveIPServer {
	if x != nil {
		return x.AdaptiveIpServer
	}
	return nil
}

type CreateAdaptiveIPServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUuid string `protobuf:"bytes,1,opt,name=server_uuid,json=serverUuid,proto3" json:"server_uuid,omitempty"`
	PublicIp   string `protobuf:"bytes,2,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
}

func (x *CreateAdaptiveIPServerRequest) Reset() {
	*x = CreateAdaptiveIPServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdaptiveIPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdaptiveIPServerRequest) ProtoMessage() {}

func (x *CreateAdaptiveIPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdaptiveIPServerRequest.ProtoReflect.Descriptor instead.
func (*CreateAdaptiveIPServerRequest) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{11}
}

func (x *CreateAdaptiveIPServerRequest) GetServerUuid() string {
	if x != nil {
		return x.ServerUuid
	}
	return ""
}

func (x *CreateAdaptiveIPServerRequest) GetPublicIp() string {
	if x != nil {
		return x.PublicIp
	}
	return ""
}

type GetAdaptiveIPServerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdaptiveIpServer *AdaptiveIPServer `protobuf:"bytes,1,opt,name=adaptive_ip_server,json=adaptiveIpServer,proto3" json:"adaptive_ip_server,omitempty"`
	Row              int64             `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
	Page             int64             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetAdaptiveIPServerListRequest) Reset() {
	*x = GetAdaptiveIPServerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdaptiveIPServerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdaptiveIPServerListRequest) ProtoMessage() {}

func (x *GetAdaptiveIPServerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdaptiveIPServerListRequest.ProtoReflect.Descriptor instead.
func (*GetAdaptiveIPServerListRequest) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{12}
}

func (x *GetAdaptiveIPServerListRequest) GetAdaptiveIpServer() *AdaptiveIPServer {
	if x != nil {
		return x.AdaptiveIpServer
	}
	return nil
}

func (x *GetAdaptiveIPServerListRequest) GetRow() int64 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *GetAdaptiveIPServerListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type AdaptiveIPServerNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *AdaptiveIPServerNum) Reset() {
	*x = AdaptiveIPServerNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveIPServerNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveIPServerNum) ProtoMessage() {}

func (x *AdaptiveIPServerNum) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveIPServerNum.ProtoReflect.Descriptor instead.
func (*AdaptiveIPServerNum) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{13}
}

func (x *AdaptiveIPServerNum) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

// DHCPD
type CreateDHPCDConfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetUuid string `protobuf:"bytes,1,opt,name=subnet_uuid,json=subnetUuid,proto3" json:"subnet_uuid,omitempty"`
	NodeUuids  string `protobuf:"bytes,2,opt,name=node_uuids,json=nodeUuids,proto3" json:"node_uuids,omitempty"`
}

func (x *CreateDHPCDConfRequest) Reset() {
	*x = CreateDHPCDConfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDHPCDConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDHPCDConfRequest) ProtoMessage() {}

func (x *CreateDHPCDConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDHPCDConfRequest.ProtoReflect.Descriptor instead.
func (*CreateDHPCDConfRequest) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{14}
}

func (x *CreateDHPCDConfRequest) GetSubnetUuid() string {
	if x != nil {
		return x.SubnetUuid
	}
	return ""
}

func (x *CreateDHPCDConfRequest) GetNodeUuids() string {
	if x != nil {
		return x.NodeUuids
	}
	return ""
}

type ReqHarp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet []*Subnet `protobuf:"bytes,1,rep,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *ReqHarp) Reset() {
	*x = ReqHarp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqHarp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqHarp) ProtoMessage() {}

func (x *ReqHarp) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqHarp.ProtoReflect.Descriptor instead.
func (*ReqHarp) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{15}
}

func (x *ReqHarp) GetSubnet() []*Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type ResHarp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet []*Subnet `protobuf:"bytes,1,rep,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *ResHarp) Reset() {
	*x = ResHarp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResHarp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResHarp) ProtoMessage() {}

func (x *ResHarp) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResHarp.ProtoReflect.Descriptor instead.
func (*ResHarp) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{16}
}

func (x *ResHarp) GetSubnet() []*Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

var File_harp_proto protoreflect.FileDescriptor

var file_harp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x61, 0x72, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x07, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x06, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x30,
	0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x22, 0x60, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x22, 0x1d, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x22, 0xc8, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3e, 0x0a, 0x19,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x22, 0xcf, 0x01, 0x0a,
	0x10, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5a,
	0x0a, 0x14, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x12, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x12,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72,
	0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x13, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22,
	0x58, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x48, 0x50, 0x43, 0x44, 0x43, 0x6f,
	0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x48, 0x61, 0x72, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x2d, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x48,
	0x61, 0x72, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x32, 0xfb, 0x06, 0x0a, 0x04, 0x48, 0x61, 0x72, 0x70,
	0x12, 0x28, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x1a, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x48, 0x61, 0x72, 0x70, 0x1a, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x48, 0x61, 0x72,
	0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x2a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x75, 0x6d,
	0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x09, 0x2e, 0x70, 0x62, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x50, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x08, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x08, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x48, 0x50, 0x43, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x48, 0x50, 0x43, 0x44, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x1f, 0x5a, 0x1d, 0x68, 0x63, 0x63, 0x2f, 0x66, 0x6c, 0x75,
	0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x72,
	0x70, 0x63, 0x68, 0x61, 0x72, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_harp_proto_rawDescOnce sync.Once
	file_harp_proto_rawDescData = file_harp_proto_rawDesc
)

func file_harp_proto_rawDescGZIP() []byte {
	file_harp_proto_rawDescOnce.Do(func() {
		file_harp_proto_rawDescData = protoimpl.X.CompressGZIP(file_harp_proto_rawDescData)
	})
	return file_harp_proto_rawDescData
}

var file_harp_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_harp_proto_goTypes = []interface{}{
	(*Empty)(nil),                          // 0: pb.empty
	(*UUID)(nil),                           // 1: pb.UUID
	(*Result)(nil),                         // 2: pb.Result
	(*Subnet)(nil),                         // 3: pb.Subnet
	(*SubnetList)(nil),                     // 4: pb.SubnetList
	(*GetSubnetListRequest)(nil),           // 5: pb.GetSubnetListRequest
	(*SubnetNum)(nil),                      // 6: pb.SubnetNum
	(*AdaptiveIPSetting)(nil),              // 7: pb.AdaptiveIPSetting
	(*AdaptiveIPAvailableIPList)(nil),      // 8: pb.AdaptiveIPAvailableIPList
	(*AdaptiveIPServer)(nil),               // 9: pb.AdaptiveIPServer
	(*AdaptiveIPServerList)(nil),           // 10: pb.AdaptiveIPServerList
	(*CreateAdaptiveIPServerRequest)(nil),  // 11: pb.CreateAdaptiveIPServerRequest
	(*GetAdaptiveIPServerListRequest)(nil), // 12: pb.GetAdaptiveIPServerListRequest
	(*AdaptiveIPServerNum)(nil),            // 13: pb.AdaptiveIPServerNum
	(*CreateDHPCDConfRequest)(nil),         // 14: pb.CreateDHPCDConfRequest
	(*ReqHarp)(nil),                        // 15: pb.ReqHarp
	(*ResHarp)(nil),                        // 16: pb.ResHarp
	(*timestamp.Timestamp)(nil),            // 17: google.protobuf.Timestamp
}
var file_harp_proto_depIdxs = []int32{
	1,  // 0: pb.Subnet.uuid:type_name -> pb.UUID
	17, // 1: pb.Subnet.created_at:type_name -> google.protobuf.Timestamp
	3,  // 2: pb.SubnetList.subnet:type_name -> pb.Subnet
	3,  // 3: pb.GetSubnetListRequest.subnet:type_name -> pb.Subnet
	9,  // 4: pb.AdaptiveIPServerList.adaptive_ip_server:type_name -> pb.AdaptiveIPServer
	9,  // 5: pb.GetAdaptiveIPServerListRequest.adaptive_ip_server:type_name -> pb.AdaptiveIPServer
	3,  // 6: pb.ReqHarp.subnet:type_name -> pb.Subnet
	3,  // 7: pb.ResHarp.subnet:type_name -> pb.Subnet
	3,  // 8: pb.Harp.CreateSubnet:input_type -> pb.Subnet
	15, // 9: pb.Harp.GetSubnet:input_type -> pb.ReqHarp
	5,  // 10: pb.Harp.GetSubnetList:input_type -> pb.GetSubnetListRequest
	0,  // 11: pb.Harp.GetSubnetNum:input_type -> pb.empty
	3,  // 12: pb.Harp.UpdateSubnet:input_type -> pb.Subnet
	1,  // 13: pb.Harp.DeleteSubnet:input_type -> pb.UUID
	7,  // 14: pb.Harp.CreateAdaptiveIPSetting:input_type -> pb.AdaptiveIPSetting
	0,  // 15: pb.Harp.GetAdaptiveIPSetting:input_type -> pb.empty
	0,  // 16: pb.Harp.GetAdaptiveIPAvailableIPList:input_type -> pb.empty
	11, // 17: pb.Harp.CreateAdaptiveIPServer:input_type -> pb.CreateAdaptiveIPServerRequest
	1,  // 18: pb.Harp.GetAdaptiveIPServer:input_type -> pb.UUID
	12, // 19: pb.Harp.GetAdaptiveIPServerList:input_type -> pb.GetAdaptiveIPServerListRequest
	0,  // 20: pb.Harp.GetAdaptiveIPServerNum:input_type -> pb.empty
	1,  // 21: pb.Harp.DeleteAdaptiveIPServer:input_type -> pb.UUID
	14, // 22: pb.Harp.CreateDHPCDConf:input_type -> pb.CreateDHPCDConfRequest
	3,  // 23: pb.Harp.CreateSubnet:output_type -> pb.Subnet
	16, // 24: pb.Harp.GetSubnet:output_type -> pb.ResHarp
	4,  // 25: pb.Harp.GetSubnetList:output_type -> pb.SubnetList
	6,  // 26: pb.Harp.GetSubnetNum:output_type -> pb.SubnetNum
	3,  // 27: pb.Harp.UpdateSubnet:output_type -> pb.Subnet
	1,  // 28: pb.Harp.DeleteSubnet:output_type -> pb.UUID
	7,  // 29: pb.Harp.CreateAdaptiveIPSetting:output_type -> pb.AdaptiveIPSetting
	7,  // 30: pb.Harp.GetAdaptiveIPSetting:output_type -> pb.AdaptiveIPSetting
	8,  // 31: pb.Harp.GetAdaptiveIPAvailableIPList:output_type -> pb.AdaptiveIPAvailableIPList
	9,  // 32: pb.Harp.CreateAdaptiveIPServer:output_type -> pb.AdaptiveIPServer
	9,  // 33: pb.Harp.GetAdaptiveIPServer:output_type -> pb.AdaptiveIPServer
	10, // 34: pb.Harp.GetAdaptiveIPServerList:output_type -> pb.AdaptiveIPServerList
	13, // 35: pb.Harp.GetAdaptiveIPServerNum:output_type -> pb.AdaptiveIPServerNum
	1,  // 36: pb.Harp.DeleteAdaptiveIPServer:output_type -> pb.UUID
	2,  // 37: pb.Harp.CreateDHPCDConf:output_type -> pb.Result
	23, // [23:38] is the sub-list for method output_type
	8,  // [8:23] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_harp_proto_init() }
func file_harp_proto_init() {
	if File_harp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_harp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveIPSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveIPAvailableIPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveIPServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveIPServerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdaptiveIPServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdaptiveIPServerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveIPServerNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDHPCDConfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqHarp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResHarp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_harp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_harp_proto_goTypes,
		DependencyIndexes: file_harp_proto_depIdxs,
		MessageInfos:      file_harp_proto_msgTypes,
	}.Build()
	File_harp_proto = out.File
	file_harp_proto_rawDesc = nil
	file_harp_proto_goTypes = nil
	file_harp_proto_depIdxs = nil
}
