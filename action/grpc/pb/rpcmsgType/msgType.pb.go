// Copyright 2020 HCC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v4.0.0
// source: msgType.proto

package rpcmsgType

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{0}
}

// HccError
type HccError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode uint64 `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	ErrText string `protobuf:"bytes,2,opt,name=ErrText,proto3" json:"ErrText,omitempty"`
}

func (x *HccError) Reset() {
	*x = HccError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HccError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HccError) ProtoMessage() {}

func (x *HccError) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HccError.ProtoReflect.Descriptor instead.
func (*HccError) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{1}
}

func (x *HccError) GetErrCode() uint64 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *HccError) GetErrText() string {
	if x != nil {
		return x.ErrText
	}
	return ""
}

// Flute
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ServerUUID  string               `protobuf:"bytes,2,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	BmcMacAddr  string               `protobuf:"bytes,3,opt,name=bmc_mac_addr,json=bmcMacAddr,proto3" json:"bmc_mac_addr,omitempty"`
	BmcIP       string               `protobuf:"bytes,4,opt,name=bmcIP,proto3" json:"bmcIP,omitempty"`
	PXEMacAddr  string               `protobuf:"bytes,5,opt,name=PXE_mac_addr,json=PXEMacAddr,proto3" json:"PXE_mac_addr,omitempty"`
	Status      string               `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	CPUCores    int32                `protobuf:"varint,7,opt,name=CPU_cores,json=CPUCores,proto3" json:"CPU_cores,omitempty"`
	Memory      int32                `protobuf:"varint,8,opt,name=memory,proto3" json:"memory,omitempty"`
	Description string               `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	RackNumber  int32                `protobuf:"varint,10,opt,name=rack_number,json=rackNumber,proto3" json:"rack_number,omitempty"`
	CreatedAt   *timestamp.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Active      int32                `protobuf:"varint,12,opt,name=active,proto3" json:"active,omitempty"`
	ForceOff    bool                 `protobuf:"varint,13,opt,name=force_off,json=forceOff,proto3" json:"force_off,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{2}
}

func (x *Node) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Node) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *Node) GetBmcMacAddr() string {
	if x != nil {
		return x.BmcMacAddr
	}
	return ""
}

func (x *Node) GetBmcIP() string {
	if x != nil {
		return x.BmcIP
	}
	return ""
}

func (x *Node) GetPXEMacAddr() string {
	if x != nil {
		return x.PXEMacAddr
	}
	return ""
}

func (x *Node) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Node) GetCPUCores() int32 {
	if x != nil {
		return x.CPUCores
	}
	return 0
}

func (x *Node) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetRackNumber() int32 {
	if x != nil {
		return x.RackNumber
	}
	return 0
}

func (x *Node) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Node) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *Node) GetForceOff() bool {
	if x != nil {
		return x.ForceOff
	}
	return false
}

type NodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeUUID      string `protobuf:"bytes,1,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
	CPUModel      string `protobuf:"bytes,2,opt,name=CPU_model,json=CPUModel,proto3" json:"CPU_model,omitempty"`
	CPUProcessors int32  `protobuf:"varint,3,opt,name=CPU_processors,json=CPUProcessors,proto3" json:"CPU_processors,omitempty"`
	CPUThreads    int32  `protobuf:"varint,4,opt,name=CPU_threads,json=CPUThreads,proto3" json:"CPU_threads,omitempty"`
}

func (x *NodeDetail) Reset() {
	*x = NodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetail) ProtoMessage() {}

func (x *NodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetail.ProtoReflect.Descriptor instead.
func (*NodeDetail) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{3}
}

func (x *NodeDetail) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

func (x *NodeDetail) GetCPUModel() string {
	if x != nil {
		return x.CPUModel
	}
	return ""
}

func (x *NodeDetail) GetCPUProcessors() int32 {
	if x != nil {
		return x.CPUProcessors
	}
	return 0
}

func (x *NodeDetail) GetCPUThreads() int32 {
	if x != nil {
		return x.CPUThreads
	}
	return 0
}

// Violin
type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID       string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	SubnetUUID string               `protobuf:"bytes,2,opt,name=subnetUUID,proto3" json:"subnetUUID,omitempty"`
	OS         string               `protobuf:"bytes,3,opt,name=OS,proto3" json:"OS,omitempty"`
	ServerName string               `protobuf:"bytes,4,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	ServerDesc string               `protobuf:"bytes,5,opt,name=server_desc,json=serverDesc,proto3" json:"server_desc,omitempty"`
	CPU        int32                `protobuf:"varint,6,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Memory     int32                `protobuf:"varint,7,opt,name=memory,proto3" json:"memory,omitempty"`
	DiskSize   int32                `protobuf:"varint,8,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	Status     string               `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	UserUUID   string               `protobuf:"bytes,10,opt,name=userUUID,proto3" json:"userUUID,omitempty"`
	CreatedAt  *timestamp.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{4}
}

func (x *Server) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Server) GetSubnetUUID() string {
	if x != nil {
		return x.SubnetUUID
	}
	return ""
}

func (x *Server) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *Server) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *Server) GetServerDesc() string {
	if x != nil {
		return x.ServerDesc
	}
	return ""
}

func (x *Server) GetCPU() int32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *Server) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Server) GetDiskSize() int32 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *Server) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Server) GetUserUUID() string {
	if x != nil {
		return x.UserUUID
	}
	return ""
}

func (x *Server) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID       string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ServerUUID string               `protobuf:"bytes,2,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	NodeUUID   string               `protobuf:"bytes,3,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
	CreatedAt  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ServerNode) Reset() {
	*x = ServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNode) ProtoMessage() {}

func (x *ServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNode.ProtoReflect.Descriptor instead.
func (*ServerNode) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{5}
}

func (x *ServerNode) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ServerNode) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *ServerNode) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

func (x *ServerNode) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID    string `protobuf:"bytes,1,opt,name=ServerUUID,proto3" json:"ServerUUID,omitempty"`
	CPU           int32  `protobuf:"varint,2,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Memory        int32  `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	NumberOfNodes int32  `protobuf:"varint,4,opt,name=numberOfNodes,proto3" json:"numberOfNodes,omitempty"`
}

func (x *Quota) Reset() {
	*x = Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota) ProtoMessage() {}

func (x *Quota) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota.ProtoReflect.Descriptor instead.
func (*Quota) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{6}
}

func (x *Quota) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *Quota) GetCPU() int32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *Quota) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Quota) GetNumberOfNodes() int32 {
	if x != nil {
		return x.NumberOfNodes
	}
	return 0
}

// Violin noVNC
type VNC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID string `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	Action     string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *VNC) Reset() {
	*x = VNC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNC) ProtoMessage() {}

func (x *VNC) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNC.ProtoReflect.Descriptor instead.
func (*VNC) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{7}
}

func (x *VNC) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *VNC) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Cello
type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID       string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Size       string               `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Filesystem string               `protobuf:"bytes,3,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	ServerUUID string               `protobuf:"bytes,4,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	UseType    string               `protobuf:"bytes,5,opt,name=use_type,json=useType,proto3" json:"use_type,omitempty"`
	UserUUID   string               `protobuf:"bytes,6,opt,name=userUUID,proto3" json:"userUUID,omitempty"`
	CreatedAt  *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Network_IP string               `protobuf:"bytes,8,opt,name=network_IP,json=networkIP,proto3" json:"network_IP,omitempty"`
	GatewayIp  string               `protobuf:"bytes,9,opt,name=gateway_ip,json=gatewayIp,proto3" json:"gateway_ip,omitempty"`
	Pool       string               `protobuf:"bytes,10,opt,name=pool,proto3" json:"pool,omitempty"`
	Lun        int64                `protobuf:"varint,11,opt,name=lun,proto3" json:"lun,omitempty"`
	Action     string               `protobuf:"bytes,12,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{8}
}

func (x *Volume) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Volume) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Volume) GetFilesystem() string {
	if x != nil {
		return x.Filesystem
	}
	return ""
}

func (x *Volume) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *Volume) GetUseType() string {
	if x != nil {
		return x.UseType
	}
	return ""
}

func (x *Volume) GetUserUUID() string {
	if x != nil {
		return x.UserUUID
	}
	return ""
}

func (x *Volume) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Volume) GetNetwork_IP() string {
	if x != nil {
		return x.Network_IP
	}
	return ""
}

func (x *Volume) GetGatewayIp() string {
	if x != nil {
		return x.GatewayIp
	}
	return ""
}

func (x *Volume) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *Volume) GetLun() int64 {
	if x != nil {
		return x.Lun
	}
	return 0
}

func (x *Volume) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type VolumeAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID       string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	VolumeUUID string               `protobuf:"bytes,2,opt,name=volumeUUID,proto3" json:"volumeUUID,omitempty"`
	ServerUUID string               `protobuf:"bytes,3,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	CreatedAt  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamp.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *VolumeAttachment) Reset() {
	*x = VolumeAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeAttachment) ProtoMessage() {}

func (x *VolumeAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeAttachment.ProtoReflect.Descriptor instead.
func (*VolumeAttachment) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{9}
}

func (x *VolumeAttachment) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *VolumeAttachment) GetVolumeUUID() string {
	if x != nil {
		return x.VolumeUUID
	}
	return ""
}

func (x *VolumeAttachment) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *VolumeAttachment) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VolumeAttachment) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Harp
type AdaptiveIPSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtIfaceIPAddress string `protobuf:"bytes,1,opt,name=ext_ifaceIP_address,json=extIfaceIPAddress,proto3" json:"ext_ifaceIP_address,omitempty"`
	Netmask           string `protobuf:"bytes,2,opt,name=netmask,proto3" json:"netmask,omitempty"`
	GatewayAddress    string `protobuf:"bytes,3,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
	StartIPAddress    string `protobuf:"bytes,4,opt,name=startIP_address,json=startIPAddress,proto3" json:"startIP_address,omitempty"`
	EndIPAddress      string `protobuf:"bytes,5,opt,name=endIP_address,json=endIPAddress,proto3" json:"endIP_address,omitempty"`
}

func (x *AdaptiveIPSetting) Reset() {
	*x = AdaptiveIPSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveIPSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveIPSetting) ProtoMessage() {}

func (x *AdaptiveIPSetting) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveIPSetting.ProtoReflect.Descriptor instead.
func (*AdaptiveIPSetting) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{10}
}

func (x *AdaptiveIPSetting) GetExtIfaceIPAddress() string {
	if x != nil {
		return x.ExtIfaceIPAddress
	}
	return ""
}

func (x *AdaptiveIPSetting) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *AdaptiveIPSetting) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

func (x *AdaptiveIPSetting) GetStartIPAddress() string {
	if x != nil {
		return x.StartIPAddress
	}
	return ""
}

func (x *AdaptiveIPSetting) GetEndIPAddress() string {
	if x != nil {
		return x.EndIPAddress
	}
	return ""
}

type AdaptiveIPAvailableIPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableIp []string `protobuf:"bytes,1,rep,name=available_ip,json=availableIp,proto3" json:"available_ip,omitempty"`
}

func (x *AdaptiveIPAvailableIPList) Reset() {
	*x = AdaptiveIPAvailableIPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveIPAvailableIPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveIPAvailableIPList) ProtoMessage() {}

func (x *AdaptiveIPAvailableIPList) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveIPAvailableIPList.ProtoReflect.Descriptor instead.
func (*AdaptiveIPAvailableIPList) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{11}
}

func (x *AdaptiveIPAvailableIPList) GetAvailableIp() []string {
	if x != nil {
		return x.AvailableIp
	}
	return nil
}

type AdaptiveIPServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID     string               `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	PublicIP       string               `protobuf:"bytes,2,opt,name=publicIP,proto3" json:"publicIP,omitempty"`
	PrivateIP      string               `protobuf:"bytes,3,opt,name=privateIP,proto3" json:"privateIP,omitempty"`
	PrivateGateway string               `protobuf:"bytes,4,opt,name=private_gateway,json=privateGateway,proto3" json:"private_gateway,omitempty"`
	Status         string               `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt      *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AdaptiveIPServer) Reset() {
	*x = AdaptiveIPServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveIPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveIPServer) ProtoMessage() {}

func (x *AdaptiveIPServer) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveIPServer.ProtoReflect.Descriptor instead.
func (*AdaptiveIPServer) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{12}
}

func (x *AdaptiveIPServer) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *AdaptiveIPServer) GetPublicIP() string {
	if x != nil {
		return x.PublicIP
	}
	return ""
}

func (x *AdaptiveIPServer) GetPrivateIP() string {
	if x != nil {
		return x.PrivateIP
	}
	return ""
}

func (x *AdaptiveIPServer) GetPrivateGateway() string {
	if x != nil {
		return x.PrivateGateway
	}
	return ""
}

func (x *AdaptiveIPServer) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AdaptiveIPServer) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID           string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	NetworkIP      string               `protobuf:"bytes,2,opt,name=networkIP,proto3" json:"networkIP,omitempty"`
	Netmask        string               `protobuf:"bytes,3,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Gateway        string               `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	NextServer     string               `protobuf:"bytes,5,opt,name=next_server,json=nextServer,proto3" json:"next_server,omitempty"`
	NameServer     string               `protobuf:"bytes,6,opt,name=name_server,json=nameServer,proto3" json:"name_server,omitempty"`
	DomainName     string               `protobuf:"bytes,7,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	ServerUUID     string               `protobuf:"bytes,8,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	LeaderNodeUUID string               `protobuf:"bytes,9,opt,name=leader_nodeUUID,json=leaderNodeUUID,proto3" json:"leader_nodeUUID,omitempty"`
	OS             string               `protobuf:"bytes,10,opt,name=OS,proto3" json:"OS,omitempty"`
	SubnetName     string               `protobuf:"bytes,11,opt,name=subnet_name,json=subnetName,proto3" json:"subnet_name,omitempty"`
	CreatedAt      *timestamp.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{13}
}

func (x *Subnet) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Subnet) GetNetworkIP() string {
	if x != nil {
		return x.NetworkIP
	}
	return ""
}

func (x *Subnet) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *Subnet) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Subnet) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *Subnet) GetNameServer() string {
	if x != nil {
		return x.NameServer
	}
	return ""
}

func (x *Subnet) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *Subnet) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *Subnet) GetLeaderNodeUUID() string {
	if x != nil {
		return x.LeaderNodeUUID
	}
	return ""
}

func (x *Subnet) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *Subnet) GetSubnetName() string {
	if x != nil {
		return x.SubnetName
	}
	return ""
}

func (x *Subnet) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Piano
type Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Series) Reset() {
	*x = Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{14}
}

func (x *Series) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Series) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MetricInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric        string `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	SubMetric     string `protobuf:"bytes,2,opt,name=subMetric,proto3" json:"subMetric,omitempty"`
	Period        string `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
	AggregateType string `protobuf:"bytes,4,opt,name=aggregateType,proto3" json:"aggregateType,omitempty"`
	Duration      string `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Uuid          string `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *MetricInfo) Reset() {
	*x = MetricInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricInfo) ProtoMessage() {}

func (x *MetricInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricInfo.ProtoReflect.Descriptor instead.
func (*MetricInfo) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{15}
}

func (x *MetricInfo) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *MetricInfo) GetSubMetric() string {
	if x != nil {
		return x.SubMetric
	}
	return ""
}

func (x *MetricInfo) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *MetricInfo) GetAggregateType() string {
	if x != nil {
		return x.AggregateType
	}
	return ""
}

func (x *MetricInfo) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *MetricInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type MonitoringData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric    string    `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	SubMetric string    `protobuf:"bytes,2,opt,name=sub_metric,json=subMetric,proto3" json:"sub_metric,omitempty"`
	UUID      string    `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Series    []*Series `protobuf:"bytes,4,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *MonitoringData) Reset() {
	*x = MonitoringData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoringData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringData) ProtoMessage() {}

func (x *MonitoringData) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringData.ProtoReflect.Descriptor instead.
func (*MonitoringData) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{16}
}

func (x *MonitoringData) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *MonitoringData) GetSubMetric() string {
	if x != nil {
		return x.SubMetric
	}
	return ""
}

func (x *MonitoringData) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *MonitoringData) GetSeries() []*Series {
	if x != nil {
		return x.Series
	}
	return nil
}

// Viola
type NormalAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Empty int32 `protobuf:"varint,1,opt,name=empty,proto3" json:"empty,omitempty"`
}

func (x *NormalAction) Reset() {
	*x = NormalAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalAction) ProtoMessage() {}

func (x *NormalAction) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalAction.ProtoReflect.Descriptor instead.
func (*NormalAction) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{17}
}

func (x *NormalAction) GetEmpty() int32 {
	if x != nil {
		return x.Empty
	}
	return 0
}

type HccAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionArea  string `protobuf:"bytes,1,opt,name=action_area,json=actionArea,proto3" json:"action_area,omitempty"`
	ActionClass string `protobuf:"bytes,2,opt,name=action_class,json=actionClass,proto3" json:"action_class,omitempty"`
	ActionScope string `protobuf:"bytes,3,opt,name=action_scope,json=actionScope,proto3" json:"action_scope,omitempty"`
	IPrange     string `protobuf:"bytes,4,opt,name=IPrange,proto3" json:"IPrange,omitempty"`
	ServerUUID  string `protobuf:"bytes,5,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
}

func (x *HccAction) Reset() {
	*x = HccAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HccAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HccAction) ProtoMessage() {}

func (x *HccAction) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HccAction.ProtoReflect.Descriptor instead.
func (*HccAction) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{18}
}

func (x *HccAction) GetActionArea() string {
	if x != nil {
		return x.ActionArea
	}
	return ""
}

func (x *HccAction) GetActionClass() string {
	if x != nil {
		return x.ActionClass
	}
	return ""
}

func (x *HccAction) GetActionScope() string {
	if x != nil {
		return x.ActionScope
	}
	return ""
}

func (x *HccAction) GetIPrange() string {
	if x != nil {
		return x.IPrange
	}
	return ""
}

func (x *HccAction) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType   string        `protobuf:"bytes,1,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	NormalAction *NormalAction `protobuf:"bytes,2,opt,name=normal_action,json=normalAction,proto3" json:"normal_action,omitempty"`
	HccAction    *HccAction    `protobuf:"bytes,3,opt,name=hcc_action,json=hccAction,proto3" json:"hcc_action,omitempty"`
	ActionResult string        `protobuf:"bytes,4,opt,name=action_result,json=actionResult,proto3" json:"action_result,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{19}
}

func (x *Action) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *Action) GetNormalAction() *NormalAction {
	if x != nil {
		return x.NormalAction
	}
	return nil
}

func (x *Action) GetHccAction() *HccAction {
	if x != nil {
		return x.HccAction
	}
	return nil
}

func (x *Action) GetActionResult() string {
	if x != nil {
		return x.ActionResult
	}
	return ""
}

type Control struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    *Action `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Publisher string  `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Receiver  string  `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (x *Control) Reset() {
	*x = Control{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Control) ProtoMessage() {}

func (x *Control) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Control.ProtoReflect.Descriptor instead.
func (*Control) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{20}
}

func (x *Control) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Control) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *Control) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

type Controls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Control []*Control `protobuf:"bytes,1,rep,name=control,proto3" json:"control,omitempty"`
}

func (x *Controls) Reset() {
	*x = Controls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Controls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Controls) ProtoMessage() {}

func (x *Controls) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Controls.ProtoReflect.Descriptor instead.
func (*Controls) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{21}
}

func (x *Controls) GetControl() []*Control {
	if x != nil {
		return x.Control
	}
	return nil
}

// For Return to Scheduled Nodes
type ScheduledNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShceduledNode []*Node `protobuf:"bytes,1,rep,name=shceduledNode,proto3" json:"shceduledNode,omitempty"`
}

func (x *ScheduledNodes) Reset() {
	*x = ScheduledNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledNodes) ProtoMessage() {}

func (x *ScheduledNodes) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledNodes.ProtoReflect.Descriptor instead.
func (*ScheduledNodes) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{22}
}

func (x *ScheduledNodes) GetShceduledNode() []*Node {
	if x != nil {
		return x.ShceduledNode
	}
	return nil
}

// For scheduling
type ScheduleServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleServer *Server `protobuf:"bytes,1,opt,name=scheduleServer,proto3" json:"scheduleServer,omitempty"`
	NumOfNodes     int32   `protobuf:"varint,2,opt,name=numOfNodes,proto3" json:"numOfNodes,omitempty"`
}

func (x *ScheduleServer) Reset() {
	*x = ScheduleServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleServer) ProtoMessage() {}

func (x *ScheduleServer) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleServer.ProtoReflect.Descriptor instead.
func (*ScheduleServer) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{23}
}

func (x *ScheduleServer) GetScheduleServer() *Server {
	if x != nil {
		return x.ScheduleServer
	}
	return nil
}

func (x *ScheduleServer) GetNumOfNodes() int32 {
	if x != nil {
		return x.NumOfNodes
	}
	return 0
}

var File_msgType_proto protoreflect.FileDescriptor

var file_msgType_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x3e, 0x0a, 0x08, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x72, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x22, 0x94, 0x03, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0c, 0x62, 0x6d, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6d, 0x63, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6d, 0x63, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x6d, 0x63, 0x49, 0x50, 0x12, 0x20, 0x0a, 0x0c, 0x50, 0x58, 0x45, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x58, 0x45, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x43, 0x50, 0x55, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x50, 0x55, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x43, 0x50, 0x55, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x50, 0x55, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x43, 0x50, 0x55, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x50, 0x55, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43,
	0x50, 0x55, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x06, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50,
	0x55, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x97, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x77, 0x0a, 0x05, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x03, 0x56, 0x4e, 0x43, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xde, 0x02, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x49, 0x50, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x50, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x75, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x75, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xdc, 0x01, 0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x49, 0x50, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x50, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x49, 0x50, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3e, 0x0a, 0x19, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x22, 0xe8, 0x01, 0x0a, 0x10, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x86, 0x03, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x50,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x50, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f,
	0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x32, 0x0a,
	0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x0c, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x48, 0x63, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x50, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x50, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44,
	0x22, 0xbd, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0d,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x68, 0x63, 0x63, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x68, 0x63, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x6c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x36,
	0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x45, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x73, 0x68, 0x63, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d,
	0x73, 0x68, 0x63, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a,
	0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x4f,
	0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x25, 0x5a, 0x23, 0x68, 0x63, 0x63, 0x2f,
	0x66, 0x6c, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msgType_proto_rawDescOnce sync.Once
	file_msgType_proto_rawDescData = file_msgType_proto_rawDesc
)

func file_msgType_proto_rawDescGZIP() []byte {
	file_msgType_proto_rawDescOnce.Do(func() {
		file_msgType_proto_rawDescData = protoimpl.X.CompressGZIP(file_msgType_proto_rawDescData)
	})
	return file_msgType_proto_rawDescData
}

var file_msgType_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_msgType_proto_goTypes = []interface{}{
	(*Empty)(nil),                     // 0: MsgType.Empty
	(*HccError)(nil),                  // 1: MsgType.HccError
	(*Node)(nil),                      // 2: MsgType.Node
	(*NodeDetail)(nil),                // 3: MsgType.NodeDetail
	(*Server)(nil),                    // 4: MsgType.Server
	(*ServerNode)(nil),                // 5: MsgType.ServerNode
	(*Quota)(nil),                     // 6: MsgType.Quota
	(*VNC)(nil),                       // 7: MsgType.VNC
	(*Volume)(nil),                    // 8: MsgType.Volume
	(*VolumeAttachment)(nil),          // 9: MsgType.VolumeAttachment
	(*AdaptiveIPSetting)(nil),         // 10: MsgType.AdaptiveIPSetting
	(*AdaptiveIPAvailableIPList)(nil), // 11: MsgType.AdaptiveIPAvailableIPList
	(*AdaptiveIPServer)(nil),          // 12: MsgType.AdaptiveIPServer
	(*Subnet)(nil),                    // 13: MsgType.Subnet
	(*Series)(nil),                    // 14: MsgType.Series
	(*MetricInfo)(nil),                // 15: MsgType.MetricInfo
	(*MonitoringData)(nil),            // 16: MsgType.MonitoringData
	(*NormalAction)(nil),              // 17: MsgType.NormalAction
	(*HccAction)(nil),                 // 18: MsgType.HccAction
	(*Action)(nil),                    // 19: MsgType.Action
	(*Control)(nil),                   // 20: MsgType.Control
	(*Controls)(nil),                  // 21: MsgType.Controls
	(*ScheduledNodes)(nil),            // 22: MsgType.ScheduledNodes
	(*ScheduleServer)(nil),            // 23: MsgType.ScheduleServer
	(*timestamp.Timestamp)(nil),       // 24: google.protobuf.Timestamp
}
var file_msgType_proto_depIdxs = []int32{
	24, // 0: MsgType.Node.created_at:type_name -> google.protobuf.Timestamp
	24, // 1: MsgType.Server.created_at:type_name -> google.protobuf.Timestamp
	24, // 2: MsgType.ServerNode.created_at:type_name -> google.protobuf.Timestamp
	24, // 3: MsgType.Volume.created_at:type_name -> google.protobuf.Timestamp
	24, // 4: MsgType.VolumeAttachment.created_at:type_name -> google.protobuf.Timestamp
	24, // 5: MsgType.VolumeAttachment.updated_at:type_name -> google.protobuf.Timestamp
	24, // 6: MsgType.AdaptiveIPServer.created_at:type_name -> google.protobuf.Timestamp
	24, // 7: MsgType.Subnet.created_at:type_name -> google.protobuf.Timestamp
	14, // 8: MsgType.MonitoringData.series:type_name -> MsgType.Series
	17, // 9: MsgType.Action.normal_action:type_name -> MsgType.NormalAction
	18, // 10: MsgType.Action.hcc_action:type_name -> MsgType.HccAction
	19, // 11: MsgType.Control.action:type_name -> MsgType.Action
	20, // 12: MsgType.Controls.control:type_name -> MsgType.Control
	2,  // 13: MsgType.ScheduledNodes.shceduledNode:type_name -> MsgType.Node
	4,  // 14: MsgType.ScheduleServer.scheduleServer:type_name -> MsgType.Server
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_msgType_proto_init() }
func file_msgType_proto_init() {
	if File_msgType_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msgType_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HccError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveIPSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveIPAvailableIPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveIPServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoringData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HccAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Control); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Controls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msgType_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msgType_proto_goTypes,
		DependencyIndexes: file_msgType_proto_depIdxs,
		MessageInfos:      file_msgType_proto_msgTypes,
	}.Build()
	File_msgType_proto = out.File
	file_msgType_proto_rawDesc = nil
	file_msgType_proto_goTypes = nil
	file_msgType_proto_depIdxs = nil
}
