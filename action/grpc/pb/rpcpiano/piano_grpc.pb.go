// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpcpiano

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PianoClient is the client API for Piano service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PianoClient interface {
	Telegraph(ctx context.Context, in *ReqMetricInfo, opts ...grpc.CallOption) (*ResMonitoringData, error)
}

type pianoClient struct {
	cc grpc.ClientConnInterface
}

func NewPianoClient(cc grpc.ClientConnInterface) PianoClient {
	return &pianoClient{cc}
}

func (c *pianoClient) Telegraph(ctx context.Context, in *ReqMetricInfo, opts ...grpc.CallOption) (*ResMonitoringData, error) {
	out := new(ResMonitoringData)
	err := c.cc.Invoke(ctx, "/RpcPiano.Piano/Telegraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PianoServer is the server API for Piano service.
// All implementations must embed UnimplementedPianoServer
// for forward compatibility
type PianoServer interface {
	Telegraph(context.Context, *ReqMetricInfo) (*ResMonitoringData, error)
	mustEmbedUnimplementedPianoServer()
}

// UnimplementedPianoServer must be embedded to have forward compatible implementations.
type UnimplementedPianoServer struct {
}

func (*UnimplementedPianoServer) Telegraph(context.Context, *ReqMetricInfo) (*ResMonitoringData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Telegraph not implemented")
}
func (*UnimplementedPianoServer) mustEmbedUnimplementedPianoServer() {}

func RegisterPianoServer(s *grpc.Server, srv PianoServer) {
	s.RegisterService(&_Piano_serviceDesc, srv)
}

func _Piano_Telegraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMetricInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PianoServer).Telegraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcPiano.Piano/Telegraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PianoServer).Telegraph(ctx, req.(*ReqMetricInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Piano_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RpcPiano.Piano",
	HandlerType: (*PianoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Telegraph",
			Handler:    _Piano_Telegraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "piano.proto",
}
