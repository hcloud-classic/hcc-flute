// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpcpiccolo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PiccoloClient is the client API for Piccolo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PiccoloClient interface {
	WriteServerAction(ctx context.Context, in *ReqWriteServerAction, opts ...grpc.CallOption) (*ResWriteServerAction, error)
}

type piccoloClient struct {
	cc grpc.ClientConnInterface
}

func NewPiccoloClient(cc grpc.ClientConnInterface) PiccoloClient {
	return &piccoloClient{cc}
}

func (c *piccoloClient) WriteServerAction(ctx context.Context, in *ReqWriteServerAction, opts ...grpc.CallOption) (*ResWriteServerAction, error) {
	out := new(ResWriteServerAction)
	err := c.cc.Invoke(ctx, "/RpcPiccolo.Piccolo/WriteServerAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PiccoloServer is the server API for Piccolo service.
// All implementations must embed UnimplementedPiccoloServer
// for forward compatibility
type PiccoloServer interface {
	WriteServerAction(context.Context, *ReqWriteServerAction) (*ResWriteServerAction, error)
	mustEmbedUnimplementedPiccoloServer()
}

// UnimplementedPiccoloServer must be embedded to have forward compatible implementations.
type UnimplementedPiccoloServer struct {
}

func (*UnimplementedPiccoloServer) WriteServerAction(context.Context, *ReqWriteServerAction) (*ResWriteServerAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteServerAction not implemented")
}
func (*UnimplementedPiccoloServer) mustEmbedUnimplementedPiccoloServer() {}

func RegisterPiccoloServer(s *grpc.Server, srv PiccoloServer) {
	s.RegisterService(&_Piccolo_serviceDesc, srv)
}

func _Piccolo_WriteServerAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWriteServerAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiccoloServer).WriteServerAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcPiccolo.Piccolo/WriteServerAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiccoloServer).WriteServerAction(ctx, req.(*ReqWriteServerAction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Piccolo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RpcPiccolo.Piccolo",
	HandlerType: (*PiccoloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteServerAction",
			Handler:    _Piccolo_WriteServerAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "piccolo.proto",
}
