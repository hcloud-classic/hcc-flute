// Copyright 2020 by ish.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v4.0.0
// source: violin.proto

package rpcviolin

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	rpcmsgType "hcc/flute/action/grpc/pb/rpcmsgType"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Symbols defined in public import of msgType.proto.

type Empty = rpcmsgType.Empty
type HccError = rpcmsgType.HccError
type Node = rpcmsgType.Node
type NodeDetail = rpcmsgType.NodeDetail
type Server = rpcmsgType.Server
type ServerNode = rpcmsgType.ServerNode
type Quota = rpcmsgType.Quota
type VNC = rpcmsgType.VNC
type Volume = rpcmsgType.Volume
type VolumeAttachment = rpcmsgType.VolumeAttachment
type AdaptiveIPSetting = rpcmsgType.AdaptiveIPSetting
type AdaptiveIPAvailableIPList = rpcmsgType.AdaptiveIPAvailableIPList
type AdaptiveIPServer = rpcmsgType.AdaptiveIPServer
type Subnet = rpcmsgType.Subnet
type Series = rpcmsgType.Series
type MetricInfo = rpcmsgType.MetricInfo
type MonitoringData = rpcmsgType.MonitoringData
type NormalAction = rpcmsgType.NormalAction
type HccAction = rpcmsgType.HccAction
type Action = rpcmsgType.Action
type Control = rpcmsgType.Control
type Controls = rpcmsgType.Controls

// Server
type ReqCreateServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *rpcmsgType.Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	NrNode int32              `protobuf:"varint,2,opt,name=nrNode,proto3" json:"nrNode,omitempty"`
}

func (x *ReqCreateServer) Reset() {
	*x = ReqCreateServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateServer) ProtoMessage() {}

func (x *ReqCreateServer) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateServer.ProtoReflect.Descriptor instead.
func (*ReqCreateServer) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{0}
}

func (x *ReqCreateServer) GetServer() *rpcmsgType.Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ReqCreateServer) GetNrNode() int32 {
	if x != nil {
		return x.NrNode
	}
	return 0
}

type ResCreateServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server        *rpcmsgType.Server     `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResCreateServer) Reset() {
	*x = ResCreateServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCreateServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCreateServer) ProtoMessage() {}

func (x *ResCreateServer) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCreateServer.ProtoReflect.Descriptor instead.
func (*ResCreateServer) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{1}
}

func (x *ResCreateServer) GetServer() *rpcmsgType.Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ResCreateServer) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *ReqGetServer) Reset() {
	*x = ReqGetServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetServer) ProtoMessage() {}

func (x *ReqGetServer) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetServer.ProtoReflect.Descriptor instead.
func (*ReqGetServer) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{2}
}

func (x *ReqGetServer) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ResGetServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server        *rpcmsgType.Server     `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetServer) Reset() {
	*x = ResGetServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetServer) ProtoMessage() {}

func (x *ResGetServer) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetServer.ProtoReflect.Descriptor instead.
func (*ResGetServer) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{3}
}

func (x *ResGetServer) GetServer() *rpcmsgType.Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ResGetServer) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetServerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *rpcmsgType.Server `protobuf:"bytes,1,opt,name=Server,proto3" json:"Server,omitempty"`
	Row    int64              `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
	Page   int64              `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ReqGetServerList) Reset() {
	*x = ReqGetServerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetServerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetServerList) ProtoMessage() {}

func (x *ReqGetServerList) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetServerList.ProtoReflect.Descriptor instead.
func (*ReqGetServerList) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{4}
}

func (x *ReqGetServerList) GetServer() *rpcmsgType.Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ReqGetServerList) GetRow() int64 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *ReqGetServerList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ResGetServerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server        []*rpcmsgType.Server   `protobuf:"bytes,1,rep,name=server,proto3" json:"server,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetServerList) Reset() {
	*x = ResGetServerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetServerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetServerList) ProtoMessage() {}

func (x *ResGetServerList) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetServerList.ProtoReflect.Descriptor instead.
func (*ResGetServerList) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{5}
}

func (x *ResGetServerList) GetServer() []*rpcmsgType.Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ResGetServerList) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ResGetServerNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num           int64                  `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetServerNum) Reset() {
	*x = ResGetServerNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetServerNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetServerNum) ProtoMessage() {}

func (x *ResGetServerNum) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetServerNum.ProtoReflect.Descriptor instead.
func (*ResGetServerNum) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{6}
}

func (x *ResGetServerNum) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ResGetServerNum) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqUpdateServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *rpcmsgType.Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *ReqUpdateServer) Reset() {
	*x = ReqUpdateServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateServer) ProtoMessage() {}

func (x *ReqUpdateServer) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateServer.ProtoReflect.Descriptor instead.
func (*ReqUpdateServer) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{7}
}

func (x *ReqUpdateServer) GetServer() *rpcmsgType.Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type ResUpdateServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server        *rpcmsgType.Server     `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResUpdateServer) Reset() {
	*x = ResUpdateServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResUpdateServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResUpdateServer) ProtoMessage() {}

func (x *ResUpdateServer) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResUpdateServer.ProtoReflect.Descriptor instead.
func (*ResUpdateServer) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{8}
}

func (x *ResUpdateServer) GetServer() *rpcmsgType.Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ResUpdateServer) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqDeleteServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *ReqDeleteServer) Reset() {
	*x = ReqDeleteServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteServer) ProtoMessage() {}

func (x *ReqDeleteServer) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteServer.ProtoReflect.Descriptor instead.
func (*ReqDeleteServer) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{9}
}

func (x *ReqDeleteServer) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ResDeleteServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID          string                 `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResDeleteServer) Reset() {
	*x = ResDeleteServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDeleteServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDeleteServer) ProtoMessage() {}

func (x *ResDeleteServer) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDeleteServer.ProtoReflect.Descriptor instead.
func (*ResDeleteServer) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{10}
}

func (x *ResDeleteServer) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ResDeleteServer) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqCreateServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerNode *rpcmsgType.ServerNode `protobuf:"bytes,1,opt,name=server_node,json=serverNode,proto3" json:"server_node,omitempty"`
}

func (x *ReqCreateServerNode) Reset() {
	*x = ReqCreateServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateServerNode) ProtoMessage() {}

func (x *ReqCreateServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateServerNode.ProtoReflect.Descriptor instead.
func (*ReqCreateServerNode) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{11}
}

func (x *ReqCreateServerNode) GetServerNode() *rpcmsgType.ServerNode {
	if x != nil {
		return x.ServerNode
	}
	return nil
}

type ResCreateServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerNode    *rpcmsgType.ServerNode `protobuf:"bytes,1,opt,name=server_node,json=serverNode,proto3" json:"server_node,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResCreateServerNode) Reset() {
	*x = ResCreateServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCreateServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCreateServerNode) ProtoMessage() {}

func (x *ResCreateServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCreateServerNode.ProtoReflect.Descriptor instead.
func (*ResCreateServerNode) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{12}
}

func (x *ResCreateServerNode) GetServerNode() *rpcmsgType.ServerNode {
	if x != nil {
		return x.ServerNode
	}
	return nil
}

func (x *ResCreateServerNode) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *ReqGetServerNode) Reset() {
	*x = ReqGetServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetServerNode) ProtoMessage() {}

func (x *ReqGetServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetServerNode.ProtoReflect.Descriptor instead.
func (*ReqGetServerNode) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{13}
}

func (x *ReqGetServerNode) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ResGetServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerNode    *rpcmsgType.ServerNode `protobuf:"bytes,1,opt,name=server_node,json=serverNode,proto3" json:"server_node,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetServerNode) Reset() {
	*x = ResGetServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetServerNode) ProtoMessage() {}

func (x *ResGetServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetServerNode.ProtoReflect.Descriptor instead.
func (*ResGetServerNode) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{14}
}

func (x *ResGetServerNode) GetServerNode() *rpcmsgType.ServerNode {
	if x != nil {
		return x.ServerNode
	}
	return nil
}

func (x *ResGetServerNode) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetServerNodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID string `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
}

func (x *ReqGetServerNodeList) Reset() {
	*x = ReqGetServerNodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetServerNodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetServerNodeList) ProtoMessage() {}

func (x *ReqGetServerNodeList) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetServerNodeList.ProtoReflect.Descriptor instead.
func (*ReqGetServerNodeList) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{15}
}

func (x *ReqGetServerNodeList) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

type ResGetServerNodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerNode    []*rpcmsgType.ServerNode `protobuf:"bytes,1,rep,name=server_node,json=serverNode,proto3" json:"server_node,omitempty"`
	HccErrorStack []*rpcmsgType.HccError   `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetServerNodeList) Reset() {
	*x = ResGetServerNodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetServerNodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetServerNodeList) ProtoMessage() {}

func (x *ResGetServerNodeList) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetServerNodeList.ProtoReflect.Descriptor instead.
func (*ResGetServerNodeList) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{16}
}

func (x *ResGetServerNodeList) GetServerNode() []*rpcmsgType.ServerNode {
	if x != nil {
		return x.ServerNode
	}
	return nil
}

func (x *ResGetServerNodeList) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetServerNodeNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID string `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
}

func (x *ReqGetServerNodeNum) Reset() {
	*x = ReqGetServerNodeNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetServerNodeNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetServerNodeNum) ProtoMessage() {}

func (x *ReqGetServerNodeNum) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetServerNodeNum.ProtoReflect.Descriptor instead.
func (*ReqGetServerNodeNum) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{17}
}

func (x *ReqGetServerNodeNum) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

type ResGetServerNodeNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num           int64                  `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetServerNodeNum) Reset() {
	*x = ResGetServerNodeNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetServerNodeNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetServerNodeNum) ProtoMessage() {}

func (x *ResGetServerNodeNum) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetServerNodeNum.ProtoReflect.Descriptor instead.
func (*ResGetServerNodeNum) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{18}
}

func (x *ResGetServerNodeNum) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ResGetServerNodeNum) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqDeleteServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *ReqDeleteServerNode) Reset() {
	*x = ReqDeleteServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteServerNode) ProtoMessage() {}

func (x *ReqDeleteServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteServerNode.ProtoReflect.Descriptor instead.
func (*ReqDeleteServerNode) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{19}
}

func (x *ReqDeleteServerNode) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ResDeleteServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID          string                 `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResDeleteServerNode) Reset() {
	*x = ResDeleteServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDeleteServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDeleteServerNode) ProtoMessage() {}

func (x *ResDeleteServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDeleteServerNode.ProtoReflect.Descriptor instead.
func (*ResDeleteServerNode) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{20}
}

func (x *ResDeleteServerNode) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ResDeleteServerNode) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqDeleteServerNodeByServerUUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID string `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
}

func (x *ReqDeleteServerNodeByServerUUID) Reset() {
	*x = ReqDeleteServerNodeByServerUUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteServerNodeByServerUUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteServerNodeByServerUUID) ProtoMessage() {}

func (x *ReqDeleteServerNodeByServerUUID) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteServerNodeByServerUUID.ProtoReflect.Descriptor instead.
func (*ReqDeleteServerNodeByServerUUID) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{21}
}

func (x *ReqDeleteServerNodeByServerUUID) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

type ResDeleteServerNodeByServerUUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID    string                 `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResDeleteServerNodeByServerUUID) Reset() {
	*x = ResDeleteServerNodeByServerUUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_violin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDeleteServerNodeByServerUUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDeleteServerNodeByServerUUID) ProtoMessage() {}

func (x *ResDeleteServerNodeByServerUUID) ProtoReflect() protoreflect.Message {
	mi := &file_violin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDeleteServerNodeByServerUUID.ProtoReflect.Descriptor instead.
func (*ResDeleteServerNodeByServerUUID) Descriptor() ([]byte, []int) {
	return file_violin_proto_rawDescGZIP(), []int{22}
}

func (x *ResDeleteServerNodeByServerUUID) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *ResDeleteServerNodeByServerUUID) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

var File_violin_proto protoreflect.FileDescriptor

var file_violin_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x76, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x1a, 0x0d, 0x6d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x73, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x22, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x70, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x61, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x74, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x22, 0x5c, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x3a,
	0x0a, 0x0f, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22,
	0x25, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x37, 0x0a,
	0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48,
	0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x4b, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x26, 0x0a, 0x10, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a,
	0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48,
	0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x36, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x22, 0x85,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a,
	0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48,
	0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x35, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x22, 0x60, 0x0a,
	0x13, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22,
	0x29, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x41,
	0x0a, 0x1f, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x22, 0x7a, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d,
	0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x32, 0xd4, 0x07,
	0x0a, 0x06, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69,
	0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x1a, 0x1a, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x17, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69,
	0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1a, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a,
	0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1a, 0x2e, 0x52, 0x70, 0x63,
	0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69,
	0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x1a, 0x1a, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x1e, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x52, 0x70, 0x63, 0x56,
	0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x1b, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x52, 0x70, 0x63,
	0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x52, 0x70,
	0x63, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x54,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x1e, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e,
	0x75, 0x6d, 0x1a, 0x1e, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e,
	0x75, 0x6d, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69,
	0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x1e, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69,
	0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x1c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x2e, 0x52, 0x70, 0x63,
	0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x2a, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x69, 0x6f, 0x6c,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55,
	0x49, 0x44, 0x22, 0x00, 0x42, 0x24, 0x5a, 0x22, 0x68, 0x63, 0x63, 0x2f, 0x66, 0x6c, 0x75, 0x74,
	0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62,
	0x2f, 0x72, 0x70, 0x63, 0x76, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_violin_proto_rawDescOnce sync.Once
	file_violin_proto_rawDescData = file_violin_proto_rawDesc
)

func file_violin_proto_rawDescGZIP() []byte {
	file_violin_proto_rawDescOnce.Do(func() {
		file_violin_proto_rawDescData = protoimpl.X.CompressGZIP(file_violin_proto_rawDescData)
	})
	return file_violin_proto_rawDescData
}

var file_violin_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_violin_proto_goTypes = []interface{}{
	(*ReqCreateServer)(nil),                 // 0: RpcViolin.ReqCreateServer
	(*ResCreateServer)(nil),                 // 1: RpcViolin.ResCreateServer
	(*ReqGetServer)(nil),                    // 2: RpcViolin.ReqGetServer
	(*ResGetServer)(nil),                    // 3: RpcViolin.ResGetServer
	(*ReqGetServerList)(nil),                // 4: RpcViolin.ReqGetServerList
	(*ResGetServerList)(nil),                // 5: RpcViolin.ResGetServerList
	(*ResGetServerNum)(nil),                 // 6: RpcViolin.ResGetServerNum
	(*ReqUpdateServer)(nil),                 // 7: RpcViolin.ReqUpdateServer
	(*ResUpdateServer)(nil),                 // 8: RpcViolin.ResUpdateServer
	(*ReqDeleteServer)(nil),                 // 9: RpcViolin.ReqDeleteServer
	(*ResDeleteServer)(nil),                 // 10: RpcViolin.ResDeleteServer
	(*ReqCreateServerNode)(nil),             // 11: RpcViolin.ReqCreateServerNode
	(*ResCreateServerNode)(nil),             // 12: RpcViolin.ResCreateServerNode
	(*ReqGetServerNode)(nil),                // 13: RpcViolin.ReqGetServerNode
	(*ResGetServerNode)(nil),                // 14: RpcViolin.ResGetServerNode
	(*ReqGetServerNodeList)(nil),            // 15: RpcViolin.ReqGetServerNodeList
	(*ResGetServerNodeList)(nil),            // 16: RpcViolin.ResGetServerNodeList
	(*ReqGetServerNodeNum)(nil),             // 17: RpcViolin.ReqGetServerNodeNum
	(*ResGetServerNodeNum)(nil),             // 18: RpcViolin.ResGetServerNodeNum
	(*ReqDeleteServerNode)(nil),             // 19: RpcViolin.ReqDeleteServerNode
	(*ResDeleteServerNode)(nil),             // 20: RpcViolin.ResDeleteServerNode
	(*ReqDeleteServerNodeByServerUUID)(nil), // 21: RpcViolin.ReqDeleteServerNodeByServerUUID
	(*ResDeleteServerNodeByServerUUID)(nil), // 22: RpcViolin.ResDeleteServerNodeByServerUUID
	(*rpcmsgType.Server)(nil),               // 23: MsgType.Server
	(*rpcmsgType.HccError)(nil),             // 24: MsgType.HccError
	(*rpcmsgType.ServerNode)(nil),           // 25: MsgType.ServerNode
	(*rpcmsgType.Empty)(nil),                // 26: MsgType.Empty
}
var file_violin_proto_depIdxs = []int32{
	23, // 0: RpcViolin.ReqCreateServer.server:type_name -> MsgType.Server
	23, // 1: RpcViolin.ResCreateServer.server:type_name -> MsgType.Server
	24, // 2: RpcViolin.ResCreateServer.hccErrorStack:type_name -> MsgType.HccError
	23, // 3: RpcViolin.ResGetServer.server:type_name -> MsgType.Server
	24, // 4: RpcViolin.ResGetServer.hccErrorStack:type_name -> MsgType.HccError
	23, // 5: RpcViolin.ReqGetServerList.Server:type_name -> MsgType.Server
	23, // 6: RpcViolin.ResGetServerList.server:type_name -> MsgType.Server
	24, // 7: RpcViolin.ResGetServerList.hccErrorStack:type_name -> MsgType.HccError
	24, // 8: RpcViolin.ResGetServerNum.hccErrorStack:type_name -> MsgType.HccError
	23, // 9: RpcViolin.ReqUpdateServer.server:type_name -> MsgType.Server
	23, // 10: RpcViolin.ResUpdateServer.server:type_name -> MsgType.Server
	24, // 11: RpcViolin.ResUpdateServer.hccErrorStack:type_name -> MsgType.HccError
	24, // 12: RpcViolin.ResDeleteServer.hccErrorStack:type_name -> MsgType.HccError
	25, // 13: RpcViolin.ReqCreateServerNode.server_node:type_name -> MsgType.ServerNode
	25, // 14: RpcViolin.ResCreateServerNode.server_node:type_name -> MsgType.ServerNode
	24, // 15: RpcViolin.ResCreateServerNode.hccErrorStack:type_name -> MsgType.HccError
	25, // 16: RpcViolin.ResGetServerNode.server_node:type_name -> MsgType.ServerNode
	24, // 17: RpcViolin.ResGetServerNode.hccErrorStack:type_name -> MsgType.HccError
	25, // 18: RpcViolin.ResGetServerNodeList.server_node:type_name -> MsgType.ServerNode
	24, // 19: RpcViolin.ResGetServerNodeList.hccErrorStack:type_name -> MsgType.HccError
	24, // 20: RpcViolin.ResGetServerNodeNum.hccErrorStack:type_name -> MsgType.HccError
	24, // 21: RpcViolin.ResDeleteServerNode.hccErrorStack:type_name -> MsgType.HccError
	24, // 22: RpcViolin.ResDeleteServerNodeByServerUUID.hccErrorStack:type_name -> MsgType.HccError
	0,  // 23: RpcViolin.Violin.CreateServer:input_type -> RpcViolin.ReqCreateServer
	2,  // 24: RpcViolin.Violin.GetServer:input_type -> RpcViolin.ReqGetServer
	4,  // 25: RpcViolin.Violin.GetServerList:input_type -> RpcViolin.ReqGetServerList
	26, // 26: RpcViolin.Violin.GetServerNum:input_type -> MsgType.Empty
	7,  // 27: RpcViolin.Violin.UpdateServer:input_type -> RpcViolin.ReqUpdateServer
	9,  // 28: RpcViolin.Violin.DeleteServer:input_type -> RpcViolin.ReqDeleteServer
	11, // 29: RpcViolin.Violin.CreateServerNode:input_type -> RpcViolin.ReqCreateServerNode
	13, // 30: RpcViolin.Violin.GetServerNode:input_type -> RpcViolin.ReqGetServerNode
	15, // 31: RpcViolin.Violin.GetServerNodeList:input_type -> RpcViolin.ReqGetServerNodeList
	17, // 32: RpcViolin.Violin.GetServerNodeNum:input_type -> RpcViolin.ReqGetServerNodeNum
	19, // 33: RpcViolin.Violin.DeleteServerNode:input_type -> RpcViolin.ReqDeleteServerNode
	21, // 34: RpcViolin.Violin.DeleteServerNodeByServerUUID:input_type -> RpcViolin.ReqDeleteServerNodeByServerUUID
	1,  // 35: RpcViolin.Violin.CreateServer:output_type -> RpcViolin.ResCreateServer
	3,  // 36: RpcViolin.Violin.GetServer:output_type -> RpcViolin.ResGetServer
	5,  // 37: RpcViolin.Violin.GetServerList:output_type -> RpcViolin.ResGetServerList
	6,  // 38: RpcViolin.Violin.GetServerNum:output_type -> RpcViolin.ResGetServerNum
	8,  // 39: RpcViolin.Violin.UpdateServer:output_type -> RpcViolin.ResUpdateServer
	10, // 40: RpcViolin.Violin.DeleteServer:output_type -> RpcViolin.ResDeleteServer
	12, // 41: RpcViolin.Violin.CreateServerNode:output_type -> RpcViolin.ResCreateServerNode
	14, // 42: RpcViolin.Violin.GetServerNode:output_type -> RpcViolin.ResGetServerNode
	16, // 43: RpcViolin.Violin.GetServerNodeList:output_type -> RpcViolin.ResGetServerNodeList
	18, // 44: RpcViolin.Violin.GetServerNodeNum:output_type -> RpcViolin.ResGetServerNodeNum
	20, // 45: RpcViolin.Violin.DeleteServerNode:output_type -> RpcViolin.ResDeleteServerNode
	22, // 46: RpcViolin.Violin.DeleteServerNodeByServerUUID:output_type -> RpcViolin.ResDeleteServerNodeByServerUUID
	35, // [35:47] is the sub-list for method output_type
	23, // [23:35] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_violin_proto_init() }
func file_violin_proto_init() {
	if File_violin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_violin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCreateServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetServerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetServerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetServerNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResUpdateServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDeleteServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCreateServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetServerNodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetServerNodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetServerNodeNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetServerNodeNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDeleteServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteServerNodeByServerUUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_violin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDeleteServerNodeByServerUUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_violin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_violin_proto_goTypes,
		DependencyIndexes: file_violin_proto_depIdxs,
		MessageInfos:      file_violin_proto_msgTypes,
	}.Build()
	File_violin_proto = out.File
	file_violin_proto_rawDesc = nil
	file_violin_proto_goTypes = nil
	file_violin_proto_depIdxs = nil
}
