// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpcviolin_novnc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NovncClient is the client API for Novnc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovncClient interface {
	CreateVNC(ctx context.Context, in *ReqNoVNC, opts ...grpc.CallOption) (*ResNoVNC, error)
	ControlVNC(ctx context.Context, in *ReqControlVNC, opts ...grpc.CallOption) (*ResControlVNC, error)
}

type novncClient struct {
	cc grpc.ClientConnInterface
}

func NewNovncClient(cc grpc.ClientConnInterface) NovncClient {
	return &novncClient{cc}
}

func (c *novncClient) CreateVNC(ctx context.Context, in *ReqNoVNC, opts ...grpc.CallOption) (*ResNoVNC, error) {
	out := new(ResNoVNC)
	err := c.cc.Invoke(ctx, "/RpcNoVNC.novnc/CreateVNC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novncClient) ControlVNC(ctx context.Context, in *ReqControlVNC, opts ...grpc.CallOption) (*ResControlVNC, error) {
	out := new(ResControlVNC)
	err := c.cc.Invoke(ctx, "/RpcNoVNC.novnc/ControlVNC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovncServer is the server API for Novnc service.
// All implementations must embed UnimplementedNovncServer
// for forward compatibility
type NovncServer interface {
	CreateVNC(context.Context, *ReqNoVNC) (*ResNoVNC, error)
	ControlVNC(context.Context, *ReqControlVNC) (*ResControlVNC, error)
	mustEmbedUnimplementedNovncServer()
}

// UnimplementedNovncServer must be embedded to have forward compatible implementations.
type UnimplementedNovncServer struct {
}

func (*UnimplementedNovncServer) CreateVNC(context.Context, *ReqNoVNC) (*ResNoVNC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVNC not implemented")
}
func (*UnimplementedNovncServer) ControlVNC(context.Context, *ReqControlVNC) (*ResControlVNC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlVNC not implemented")
}
func (*UnimplementedNovncServer) mustEmbedUnimplementedNovncServer() {}

func RegisterNovncServer(s *grpc.Server, srv NovncServer) {
	s.RegisterService(&_Novnc_serviceDesc, srv)
}

func _Novnc_CreateVNC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNoVNC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovncServer).CreateVNC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcNoVNC.novnc/CreateVNC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovncServer).CreateVNC(ctx, req.(*ReqNoVNC))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novnc_ControlVNC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqControlVNC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovncServer).ControlVNC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcNoVNC.novnc/ControlVNC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovncServer).ControlVNC(ctx, req.(*ReqControlVNC))
	}
	return interceptor(ctx, in, info, handler)
}

var _Novnc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RpcNoVNC.novnc",
	HandlerType: (*NovncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVNC",
			Handler:    _Novnc_CreateVNC_Handler,
		},
		{
			MethodName: "ControlVNC",
			Handler:    _Novnc_ControlVNC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "violin_novnc.proto",
}
