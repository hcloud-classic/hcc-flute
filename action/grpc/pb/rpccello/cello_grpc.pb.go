// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpccello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CelloClient is the client API for Cello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CelloClient interface {
	VolumeHandler(ctx context.Context, in *ReqVolumeHandler, opts ...grpc.CallOption) (*ResVolumeHandler, error)
}

type celloClient struct {
	cc grpc.ClientConnInterface
}

func NewCelloClient(cc grpc.ClientConnInterface) CelloClient {
	return &celloClient{cc}
}

func (c *celloClient) VolumeHandler(ctx context.Context, in *ReqVolumeHandler, opts ...grpc.CallOption) (*ResVolumeHandler, error) {
	out := new(ResVolumeHandler)
	err := c.cc.Invoke(ctx, "/RpcCello.Cello/VolumeHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CelloServer is the server API for Cello service.
// All implementations must embed UnimplementedCelloServer
// for forward compatibility
type CelloServer interface {
	VolumeHandler(context.Context, *ReqVolumeHandler) (*ResVolumeHandler, error)
	mustEmbedUnimplementedCelloServer()
}

// UnimplementedCelloServer must be embedded to have forward compatible implementations.
type UnimplementedCelloServer struct {
}

func (*UnimplementedCelloServer) VolumeHandler(context.Context, *ReqVolumeHandler) (*ResVolumeHandler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeHandler not implemented")
}
func (*UnimplementedCelloServer) mustEmbedUnimplementedCelloServer() {}

func RegisterCelloServer(s *grpc.Server, srv CelloServer) {
	s.RegisterService(&_Cello_serviceDesc, srv)
}

func _Cello_VolumeHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVolumeHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CelloServer).VolumeHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcCello.Cello/VolumeHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CelloServer).VolumeHandler(ctx, req.(*ReqVolumeHandler))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RpcCello.Cello",
	HandlerType: (*CelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VolumeHandler",
			Handler:    _Cello_VolumeHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cello.proto",
}
