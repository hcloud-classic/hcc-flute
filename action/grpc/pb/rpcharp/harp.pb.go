// Copyright 2020 by ish.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v4.0.0
// source: harp.proto

package rpcharp

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	rpcmsgType "hcc/flute/action/grpc/pb/rpcmsgType"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Symbols defined in public import of msgType.proto.

type Empty = rpcmsgType.Empty
type HccError = rpcmsgType.HccError
type Node = rpcmsgType.Node
type NodeDetail = rpcmsgType.NodeDetail
type Server = rpcmsgType.Server
type ServerNode = rpcmsgType.ServerNode
type Quota = rpcmsgType.Quota
type VNC = rpcmsgType.VNC
type Volume = rpcmsgType.Volume
type VolumeAttachment = rpcmsgType.VolumeAttachment
type AdaptiveIPSetting = rpcmsgType.AdaptiveIPSetting
type AdaptiveIPAvailableIPList = rpcmsgType.AdaptiveIPAvailableIPList
type AdaptiveIPServer = rpcmsgType.AdaptiveIPServer
type Subnet = rpcmsgType.Subnet
type Series = rpcmsgType.Series
type MetricInfo = rpcmsgType.MetricInfo
type MonitoringData = rpcmsgType.MonitoringData
type NormalAction = rpcmsgType.NormalAction
type HccAction = rpcmsgType.HccAction
type Action = rpcmsgType.Action
type Control = rpcmsgType.Control
type Controls = rpcmsgType.Controls

// Subnet
type ReqCreateSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *rpcmsgType.Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *ReqCreateSubnet) Reset() {
	*x = ReqCreateSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateSubnet) ProtoMessage() {}

func (x *ReqCreateSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateSubnet.ProtoReflect.Descriptor instead.
func (*ReqCreateSubnet) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{0}
}

func (x *ReqCreateSubnet) GetSubnet() *rpcmsgType.Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type ResCreateSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet        *rpcmsgType.Subnet     `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResCreateSubnet) Reset() {
	*x = ResCreateSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCreateSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCreateSubnet) ProtoMessage() {}

func (x *ResCreateSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCreateSubnet.ProtoReflect.Descriptor instead.
func (*ResCreateSubnet) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{1}
}

func (x *ResCreateSubnet) GetSubnet() *rpcmsgType.Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ResCreateSubnet) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *ReqGetSubnet) Reset() {
	*x = ReqGetSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetSubnet) ProtoMessage() {}

func (x *ReqGetSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetSubnet.ProtoReflect.Descriptor instead.
func (*ReqGetSubnet) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{2}
}

func (x *ReqGetSubnet) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ResGetSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet        *rpcmsgType.Subnet     `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetSubnet) Reset() {
	*x = ResGetSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetSubnet) ProtoMessage() {}

func (x *ResGetSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetSubnet.ProtoReflect.Descriptor instead.
func (*ResGetSubnet) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{3}
}

func (x *ResGetSubnet) GetSubnet() *rpcmsgType.Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ResGetSubnet) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetSubnetByServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID string `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
}

func (x *ReqGetSubnetByServer) Reset() {
	*x = ReqGetSubnetByServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetSubnetByServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetSubnetByServer) ProtoMessage() {}

func (x *ReqGetSubnetByServer) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetSubnetByServer.ProtoReflect.Descriptor instead.
func (*ReqGetSubnetByServer) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{4}
}

func (x *ReqGetSubnetByServer) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

type ResGetSubnetByServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet        *rpcmsgType.Subnet     `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetSubnetByServer) Reset() {
	*x = ResGetSubnetByServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetSubnetByServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetSubnetByServer) ProtoMessage() {}

func (x *ResGetSubnetByServer) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetSubnetByServer.ProtoReflect.Descriptor instead.
func (*ResGetSubnetByServer) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{5}
}

func (x *ResGetSubnetByServer) GetSubnet() *rpcmsgType.Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ResGetSubnetByServer) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetSubnetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *rpcmsgType.Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Row    int64              `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
	Page   int64              `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ReqGetSubnetList) Reset() {
	*x = ReqGetSubnetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetSubnetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetSubnetList) ProtoMessage() {}

func (x *ReqGetSubnetList) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetSubnetList.ProtoReflect.Descriptor instead.
func (*ReqGetSubnetList) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{6}
}

func (x *ReqGetSubnetList) GetSubnet() *rpcmsgType.Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ReqGetSubnetList) GetRow() int64 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *ReqGetSubnetList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ResGetSubnetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet        []*rpcmsgType.Subnet   `protobuf:"bytes,1,rep,name=subnet,proto3" json:"subnet,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetSubnetList) Reset() {
	*x = ResGetSubnetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetSubnetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetSubnetList) ProtoMessage() {}

func (x *ResGetSubnetList) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetSubnetList.ProtoReflect.Descriptor instead.
func (*ResGetSubnetList) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{7}
}

func (x *ResGetSubnetList) GetSubnet() []*rpcmsgType.Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ResGetSubnetList) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ResGetSubnetNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num           int64                  `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetSubnetNum) Reset() {
	*x = ResGetSubnetNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetSubnetNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetSubnetNum) ProtoMessage() {}

func (x *ResGetSubnetNum) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetSubnetNum.ProtoReflect.Descriptor instead.
func (*ResGetSubnetNum) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{8}
}

func (x *ResGetSubnetNum) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ResGetSubnetNum) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqUpdateSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *rpcmsgType.Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *ReqUpdateSubnet) Reset() {
	*x = ReqUpdateSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateSubnet) ProtoMessage() {}

func (x *ReqUpdateSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateSubnet.ProtoReflect.Descriptor instead.
func (*ReqUpdateSubnet) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{9}
}

func (x *ReqUpdateSubnet) GetSubnet() *rpcmsgType.Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type ResUpdateSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet        *rpcmsgType.Subnet     `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResUpdateSubnet) Reset() {
	*x = ResUpdateSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResUpdateSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResUpdateSubnet) ProtoMessage() {}

func (x *ResUpdateSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResUpdateSubnet.ProtoReflect.Descriptor instead.
func (*ResUpdateSubnet) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{10}
}

func (x *ResUpdateSubnet) GetSubnet() *rpcmsgType.Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ResUpdateSubnet) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqDeleteSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *ReqDeleteSubnet) Reset() {
	*x = ReqDeleteSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteSubnet) ProtoMessage() {}

func (x *ReqDeleteSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteSubnet.ProtoReflect.Descriptor instead.
func (*ReqDeleteSubnet) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{11}
}

func (x *ReqDeleteSubnet) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ResDeleteSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID          string                 `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResDeleteSubnet) Reset() {
	*x = ResDeleteSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDeleteSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDeleteSubnet) ProtoMessage() {}

func (x *ResDeleteSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDeleteSubnet.ProtoReflect.Descriptor instead.
func (*ResDeleteSubnet) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{12}
}

func (x *ResDeleteSubnet) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ResDeleteSubnet) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

// AdaptiveIP
type ReqCreateAdaptiveIPSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdaptiveipSetting *rpcmsgType.AdaptiveIPSetting `protobuf:"bytes,1,opt,name=adaptiveip_setting,json=adaptiveipSetting,proto3" json:"adaptiveip_setting,omitempty"`
}

func (x *ReqCreateAdaptiveIPSetting) Reset() {
	*x = ReqCreateAdaptiveIPSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateAdaptiveIPSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateAdaptiveIPSetting) ProtoMessage() {}

func (x *ReqCreateAdaptiveIPSetting) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateAdaptiveIPSetting.ProtoReflect.Descriptor instead.
func (*ReqCreateAdaptiveIPSetting) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{13}
}

func (x *ReqCreateAdaptiveIPSetting) GetAdaptiveipSetting() *rpcmsgType.AdaptiveIPSetting {
	if x != nil {
		return x.AdaptiveipSetting
	}
	return nil
}

type ResCreateAdaptiveIPSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdaptiveipSetting *rpcmsgType.AdaptiveIPSetting `protobuf:"bytes,1,opt,name=adaptiveip_setting,json=adaptiveipSetting,proto3" json:"adaptiveip_setting,omitempty"`
	HccErrorStack     []*rpcmsgType.HccError        `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResCreateAdaptiveIPSetting) Reset() {
	*x = ResCreateAdaptiveIPSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCreateAdaptiveIPSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCreateAdaptiveIPSetting) ProtoMessage() {}

func (x *ResCreateAdaptiveIPSetting) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCreateAdaptiveIPSetting.ProtoReflect.Descriptor instead.
func (*ResCreateAdaptiveIPSetting) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{14}
}

func (x *ResCreateAdaptiveIPSetting) GetAdaptiveipSetting() *rpcmsgType.AdaptiveIPSetting {
	if x != nil {
		return x.AdaptiveipSetting
	}
	return nil
}

func (x *ResCreateAdaptiveIPSetting) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ResGetAdaptiveIPSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdaptiveipSetting *rpcmsgType.AdaptiveIPSetting `protobuf:"bytes,1,opt,name=adaptiveip_setting,json=adaptiveipSetting,proto3" json:"adaptiveip_setting,omitempty"`
	HccErrorStack     []*rpcmsgType.HccError        `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetAdaptiveIPSetting) Reset() {
	*x = ResGetAdaptiveIPSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetAdaptiveIPSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetAdaptiveIPSetting) ProtoMessage() {}

func (x *ResGetAdaptiveIPSetting) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetAdaptiveIPSetting.ProtoReflect.Descriptor instead.
func (*ResGetAdaptiveIPSetting) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{15}
}

func (x *ResGetAdaptiveIPSetting) GetAdaptiveipSetting() *rpcmsgType.AdaptiveIPSetting {
	if x != nil {
		return x.AdaptiveipSetting
	}
	return nil
}

func (x *ResGetAdaptiveIPSetting) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ResGetAdaptiveIPAvailableIPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdaptiveipAvailableipList *rpcmsgType.AdaptiveIPAvailableIPList `protobuf:"bytes,1,opt,name=adaptiveip_availableip_list,json=adaptiveipAvailableipList,proto3" json:"adaptiveip_availableip_list,omitempty"`
	HccErrorStack             []*rpcmsgType.HccError                `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetAdaptiveIPAvailableIPList) Reset() {
	*x = ResGetAdaptiveIPAvailableIPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetAdaptiveIPAvailableIPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetAdaptiveIPAvailableIPList) ProtoMessage() {}

func (x *ResGetAdaptiveIPAvailableIPList) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetAdaptiveIPAvailableIPList.ProtoReflect.Descriptor instead.
func (*ResGetAdaptiveIPAvailableIPList) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{16}
}

func (x *ResGetAdaptiveIPAvailableIPList) GetAdaptiveipAvailableipList() *rpcmsgType.AdaptiveIPAvailableIPList {
	if x != nil {
		return x.AdaptiveipAvailableipList
	}
	return nil
}

func (x *ResGetAdaptiveIPAvailableIPList) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqCreateAdaptiveIPServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID string `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	PublicIP   string `protobuf:"bytes,2,opt,name=publicIP,proto3" json:"publicIP,omitempty"`
}

func (x *ReqCreateAdaptiveIPServer) Reset() {
	*x = ReqCreateAdaptiveIPServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateAdaptiveIPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateAdaptiveIPServer) ProtoMessage() {}

func (x *ReqCreateAdaptiveIPServer) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateAdaptiveIPServer.ProtoReflect.Descriptor instead.
func (*ReqCreateAdaptiveIPServer) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{17}
}

func (x *ReqCreateAdaptiveIPServer) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *ReqCreateAdaptiveIPServer) GetPublicIP() string {
	if x != nil {
		return x.PublicIP
	}
	return ""
}

type ResCreateAdaptiveIPServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdaptiveipServer *rpcmsgType.AdaptiveIPServer `protobuf:"bytes,1,opt,name=adaptiveip_server,json=adaptiveipServer,proto3" json:"adaptiveip_server,omitempty"`
	HccErrorStack    []*rpcmsgType.HccError       `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResCreateAdaptiveIPServer) Reset() {
	*x = ResCreateAdaptiveIPServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCreateAdaptiveIPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCreateAdaptiveIPServer) ProtoMessage() {}

func (x *ResCreateAdaptiveIPServer) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCreateAdaptiveIPServer.ProtoReflect.Descriptor instead.
func (*ResCreateAdaptiveIPServer) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{18}
}

func (x *ResCreateAdaptiveIPServer) GetAdaptiveipServer() *rpcmsgType.AdaptiveIPServer {
	if x != nil {
		return x.AdaptiveipServer
	}
	return nil
}

func (x *ResCreateAdaptiveIPServer) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetAdaptiveIPServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID string `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
}

func (x *ReqGetAdaptiveIPServer) Reset() {
	*x = ReqGetAdaptiveIPServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAdaptiveIPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAdaptiveIPServer) ProtoMessage() {}

func (x *ReqGetAdaptiveIPServer) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAdaptiveIPServer.ProtoReflect.Descriptor instead.
func (*ReqGetAdaptiveIPServer) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{19}
}

func (x *ReqGetAdaptiveIPServer) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

type ResGetAdaptiveIPServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdaptiveipServer *rpcmsgType.AdaptiveIPServer `protobuf:"bytes,1,opt,name=adaptiveip_server,json=adaptiveipServer,proto3" json:"adaptiveip_server,omitempty"`
	HccErrorStack    []*rpcmsgType.HccError       `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetAdaptiveIPServer) Reset() {
	*x = ResGetAdaptiveIPServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetAdaptiveIPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetAdaptiveIPServer) ProtoMessage() {}

func (x *ResGetAdaptiveIPServer) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetAdaptiveIPServer.ProtoReflect.Descriptor instead.
func (*ResGetAdaptiveIPServer) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{20}
}

func (x *ResGetAdaptiveIPServer) GetAdaptiveipServer() *rpcmsgType.AdaptiveIPServer {
	if x != nil {
		return x.AdaptiveipServer
	}
	return nil
}

func (x *ResGetAdaptiveIPServer) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetAdaptiveIPServerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdaptiveipServer *rpcmsgType.AdaptiveIPServer `protobuf:"bytes,1,opt,name=adaptiveip_server,json=adaptiveipServer,proto3" json:"adaptiveip_server,omitempty"`
	Row              int64                        `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
	Page             int64                        `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ReqGetAdaptiveIPServerList) Reset() {
	*x = ReqGetAdaptiveIPServerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAdaptiveIPServerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAdaptiveIPServerList) ProtoMessage() {}

func (x *ReqGetAdaptiveIPServerList) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAdaptiveIPServerList.ProtoReflect.Descriptor instead.
func (*ReqGetAdaptiveIPServerList) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{21}
}

func (x *ReqGetAdaptiveIPServerList) GetAdaptiveipServer() *rpcmsgType.AdaptiveIPServer {
	if x != nil {
		return x.AdaptiveipServer
	}
	return nil
}

func (x *ReqGetAdaptiveIPServerList) GetRow() int64 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *ReqGetAdaptiveIPServerList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ResGetAdaptiveIPServerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdaptiveipServer []*rpcmsgType.AdaptiveIPServer `protobuf:"bytes,1,rep,name=adaptiveip_server,json=adaptiveipServer,proto3" json:"adaptiveip_server,omitempty"`
	HccErrorStack    []*rpcmsgType.HccError         `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetAdaptiveIPServerList) Reset() {
	*x = ResGetAdaptiveIPServerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetAdaptiveIPServerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetAdaptiveIPServerList) ProtoMessage() {}

func (x *ResGetAdaptiveIPServerList) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetAdaptiveIPServerList.ProtoReflect.Descriptor instead.
func (*ResGetAdaptiveIPServerList) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{22}
}

func (x *ResGetAdaptiveIPServerList) GetAdaptiveipServer() []*rpcmsgType.AdaptiveIPServer {
	if x != nil {
		return x.AdaptiveipServer
	}
	return nil
}

func (x *ResGetAdaptiveIPServerList) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ResGetAdaptiveIPServerNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num           int64                  `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetAdaptiveIPServerNum) Reset() {
	*x = ResGetAdaptiveIPServerNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetAdaptiveIPServerNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetAdaptiveIPServerNum) ProtoMessage() {}

func (x *ResGetAdaptiveIPServerNum) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetAdaptiveIPServerNum.ProtoReflect.Descriptor instead.
func (*ResGetAdaptiveIPServerNum) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{23}
}

func (x *ResGetAdaptiveIPServerNum) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ResGetAdaptiveIPServerNum) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqDeleteAdaptiveIPServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID string `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
}

func (x *ReqDeleteAdaptiveIPServer) Reset() {
	*x = ReqDeleteAdaptiveIPServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteAdaptiveIPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteAdaptiveIPServer) ProtoMessage() {}

func (x *ReqDeleteAdaptiveIPServer) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteAdaptiveIPServer.ProtoReflect.Descriptor instead.
func (*ReqDeleteAdaptiveIPServer) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{24}
}

func (x *ReqDeleteAdaptiveIPServer) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

type ResDeleteAdaptiveIPServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID    string                 `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResDeleteAdaptiveIPServer) Reset() {
	*x = ResDeleteAdaptiveIPServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDeleteAdaptiveIPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDeleteAdaptiveIPServer) ProtoMessage() {}

func (x *ResDeleteAdaptiveIPServer) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDeleteAdaptiveIPServer.ProtoReflect.Descriptor instead.
func (*ResDeleteAdaptiveIPServer) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{25}
}

func (x *ResDeleteAdaptiveIPServer) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *ResDeleteAdaptiveIPServer) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

// DHCPD
type ReqCreateDHPCDConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetUUID string `protobuf:"bytes,1,opt,name=subnetUUID,proto3" json:"subnetUUID,omitempty"`
	NodeUUIDs  string `protobuf:"bytes,2,opt,name=nodeUUIDs,proto3" json:"nodeUUIDs,omitempty"`
}

func (x *ReqCreateDHPCDConf) Reset() {
	*x = ReqCreateDHPCDConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateDHPCDConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateDHPCDConf) ProtoMessage() {}

func (x *ReqCreateDHPCDConf) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateDHPCDConf.ProtoReflect.Descriptor instead.
func (*ReqCreateDHPCDConf) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{26}
}

func (x *ReqCreateDHPCDConf) GetSubnetUUID() string {
	if x != nil {
		return x.SubnetUUID
	}
	return ""
}

func (x *ReqCreateDHPCDConf) GetNodeUUIDs() string {
	if x != nil {
		return x.NodeUUIDs
	}
	return ""
}

type ResCreateDHPCDConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResCreateDHPCDConf) Reset() {
	*x = ResCreateDHPCDConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCreateDHPCDConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCreateDHPCDConf) ProtoMessage() {}

func (x *ResCreateDHPCDConf) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCreateDHPCDConf.ProtoReflect.Descriptor instead.
func (*ResCreateDHPCDConf) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{27}
}

func (x *ResCreateDHPCDConf) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ResCreateDHPCDConf) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqDeleteDHPCDConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetUUID string `protobuf:"bytes,1,opt,name=subnetUUID,proto3" json:"subnetUUID,omitempty"`
}

func (x *ReqDeleteDHPCDConf) Reset() {
	*x = ReqDeleteDHPCDConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteDHPCDConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteDHPCDConf) ProtoMessage() {}

func (x *ReqDeleteDHPCDConf) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteDHPCDConf.ProtoReflect.Descriptor instead.
func (*ReqDeleteDHPCDConf) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{28}
}

func (x *ReqDeleteDHPCDConf) GetSubnetUUID() string {
	if x != nil {
		return x.SubnetUUID
	}
	return ""
}

type ResDeleteDHPCDConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResDeleteDHPCDConf) Reset() {
	*x = ResDeleteDHPCDConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_harp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDeleteDHPCDConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDeleteDHPCDConf) ProtoMessage() {}

func (x *ResDeleteDHPCDConf) ProtoReflect() protoreflect.Message {
	mi := &file_harp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDeleteDHPCDConf.ProtoReflect.Descriptor instead.
func (*ResDeleteDHPCDConf) Descriptor() ([]byte, []int) {
	return file_harp_proto_rawDescGZIP(), []int{29}
}

func (x *ResDeleteDHPCDConf) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ResDeleteDHPCDConf) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

var File_harp_proto protoreflect.FileDescriptor

var file_harp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x61, 0x72, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x52, 0x70,
	0x63, 0x48, 0x61, 0x72, 0x70, 0x1a, 0x0d, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x22, 0x73, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0d,
	0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63,
	0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x70, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63,
	0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x36, 0x0a, 0x14, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x22, 0x78, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d,
	0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x61, 0x0a,
	0x10, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x74, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x37, 0x0a,
	0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48,
	0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x5c, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x0d, 0x68,
	0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x22, 0x3a, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x22, 0x73, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0d,
	0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63,
	0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x25, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68,
	0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x67, 0x0a, 0x1a,
	0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x12, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x11, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x69, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x12, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x69, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x69, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x12, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x69, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x69, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0xbe, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x1b,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x69, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x69,
	0x70, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x57, 0x0a, 0x19, 0x52, 0x65, 0x71,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x50, 0x22, 0x9c, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x11, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x69, 0x70, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x22, 0x38, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x22, 0x99, 0x01, 0x0a, 0x16,
	0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x6f, 0x77,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x69,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0d, 0x68,
	0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x22, 0x66, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68,
	0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x3b, 0x0a, 0x19,
	0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x22, 0x74, 0x0a, 0x19, 0x52, 0x65, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22,
	0x52, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x48, 0x50, 0x43,
	0x44, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49,
	0x44, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x73, 0x22, 0x65, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x48, 0x50, 0x43, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x34, 0x0a, 0x12, 0x52, 0x65,
	0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x48, 0x50, 0x43, 0x44, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x22, 0x65, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x48, 0x50,
	0x43, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37,
	0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x32, 0xf6, 0x0a, 0x0a, 0x04, 0x48, 0x61, 0x72, 0x70,
	0x12, 0x44, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x18, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x1a, 0x18, 0x2e, 0x52, 0x70, 0x63,
	0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x1a, 0x15, 0x2e, 0x52, 0x70, 0x63,
	0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61,
	0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72,
	0x70, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x52, 0x70, 0x63, 0x48,
	0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52,
	0x65, 0x73, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x75,
	0x6d, 0x12, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x18, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x18, 0x2e,
	0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x1a, 0x18, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72,
	0x70, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65,
	0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x1a, 0x18, 0x2e,
	0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52,
	0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x23, 0x2e, 0x52, 0x70, 0x63, 0x48,
	0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61,
	0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x52,
	0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x22, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x22, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70,
	0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52,
	0x65, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x23, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72,
	0x70, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61,
	0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61,
	0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x22, 0x2e, 0x52,
	0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x48, 0x50, 0x43,
	0x44, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1b, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e,
	0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x48, 0x50, 0x43, 0x44, 0x43, 0x6f,
	0x6e, 0x66, 0x1a, 0x1b, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x48, 0x50, 0x43, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x48, 0x50, 0x43, 0x44,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1b, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52,
	0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x48, 0x50, 0x43, 0x44, 0x43, 0x6f, 0x6e,
	0x66, 0x1a, 0x1b, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x61, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x48, 0x50, 0x43, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x00,
	0x42, 0x22, 0x5a, 0x20, 0x68, 0x63, 0x63, 0x2f, 0x66, 0x6c, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63,
	0x68, 0x61, 0x72, 0x70, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_harp_proto_rawDescOnce sync.Once
	file_harp_proto_rawDescData = file_harp_proto_rawDesc
)

func file_harp_proto_rawDescGZIP() []byte {
	file_harp_proto_rawDescOnce.Do(func() {
		file_harp_proto_rawDescData = protoimpl.X.CompressGZIP(file_harp_proto_rawDescData)
	})
	return file_harp_proto_rawDescData
}

var file_harp_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_harp_proto_goTypes = []interface{}{
	(*ReqCreateSubnet)(nil),                      // 0: RpcHarp.ReqCreateSubnet
	(*ResCreateSubnet)(nil),                      // 1: RpcHarp.ResCreateSubnet
	(*ReqGetSubnet)(nil),                         // 2: RpcHarp.ReqGetSubnet
	(*ResGetSubnet)(nil),                         // 3: RpcHarp.ResGetSubnet
	(*ReqGetSubnetByServer)(nil),                 // 4: RpcHarp.ReqGetSubnetByServer
	(*ResGetSubnetByServer)(nil),                 // 5: RpcHarp.ResGetSubnetByServer
	(*ReqGetSubnetList)(nil),                     // 6: RpcHarp.ReqGetSubnetList
	(*ResGetSubnetList)(nil),                     // 7: RpcHarp.ResGetSubnetList
	(*ResGetSubnetNum)(nil),                      // 8: RpcHarp.ResGetSubnetNum
	(*ReqUpdateSubnet)(nil),                      // 9: RpcHarp.ReqUpdateSubnet
	(*ResUpdateSubnet)(nil),                      // 10: RpcHarp.ResUpdateSubnet
	(*ReqDeleteSubnet)(nil),                      // 11: RpcHarp.ReqDeleteSubnet
	(*ResDeleteSubnet)(nil),                      // 12: RpcHarp.ResDeleteSubnet
	(*ReqCreateAdaptiveIPSetting)(nil),           // 13: RpcHarp.ReqCreateAdaptiveIPSetting
	(*ResCreateAdaptiveIPSetting)(nil),           // 14: RpcHarp.ResCreateAdaptiveIPSetting
	(*ResGetAdaptiveIPSetting)(nil),              // 15: RpcHarp.ResGetAdaptiveIPSetting
	(*ResGetAdaptiveIPAvailableIPList)(nil),      // 16: RpcHarp.ResGetAdaptiveIPAvailableIPList
	(*ReqCreateAdaptiveIPServer)(nil),            // 17: RpcHarp.ReqCreateAdaptiveIPServer
	(*ResCreateAdaptiveIPServer)(nil),            // 18: RpcHarp.ResCreateAdaptiveIPServer
	(*ReqGetAdaptiveIPServer)(nil),               // 19: RpcHarp.ReqGetAdaptiveIPServer
	(*ResGetAdaptiveIPServer)(nil),               // 20: RpcHarp.ResGetAdaptiveIPServer
	(*ReqGetAdaptiveIPServerList)(nil),           // 21: RpcHarp.ReqGetAdaptiveIPServerList
	(*ResGetAdaptiveIPServerList)(nil),           // 22: RpcHarp.ResGetAdaptiveIPServerList
	(*ResGetAdaptiveIPServerNum)(nil),            // 23: RpcHarp.ResGetAdaptiveIPServerNum
	(*ReqDeleteAdaptiveIPServer)(nil),            // 24: RpcHarp.ReqDeleteAdaptiveIPServer
	(*ResDeleteAdaptiveIPServer)(nil),            // 25: RpcHarp.ResDeleteAdaptiveIPServer
	(*ReqCreateDHPCDConf)(nil),                   // 26: RpcHarp.ReqCreateDHPCDConf
	(*ResCreateDHPCDConf)(nil),                   // 27: RpcHarp.ResCreateDHPCDConf
	(*ReqDeleteDHPCDConf)(nil),                   // 28: RpcHarp.ReqDeleteDHPCDConf
	(*ResDeleteDHPCDConf)(nil),                   // 29: RpcHarp.ResDeleteDHPCDConf
	(*rpcmsgType.Subnet)(nil),                    // 30: MsgType.Subnet
	(*rpcmsgType.HccError)(nil),                  // 31: MsgType.HccError
	(*rpcmsgType.AdaptiveIPSetting)(nil),         // 32: MsgType.AdaptiveIPSetting
	(*rpcmsgType.AdaptiveIPAvailableIPList)(nil), // 33: MsgType.AdaptiveIPAvailableIPList
	(*rpcmsgType.AdaptiveIPServer)(nil),          // 34: MsgType.AdaptiveIPServer
	(*rpcmsgType.Empty)(nil),                     // 35: MsgType.Empty
}
var file_harp_proto_depIdxs = []int32{
	30, // 0: RpcHarp.ReqCreateSubnet.subnet:type_name -> MsgType.Subnet
	30, // 1: RpcHarp.ResCreateSubnet.subnet:type_name -> MsgType.Subnet
	31, // 2: RpcHarp.ResCreateSubnet.hccErrorStack:type_name -> MsgType.HccError
	30, // 3: RpcHarp.ResGetSubnet.subnet:type_name -> MsgType.Subnet
	31, // 4: RpcHarp.ResGetSubnet.hccErrorStack:type_name -> MsgType.HccError
	30, // 5: RpcHarp.ResGetSubnetByServer.subnet:type_name -> MsgType.Subnet
	31, // 6: RpcHarp.ResGetSubnetByServer.hccErrorStack:type_name -> MsgType.HccError
	30, // 7: RpcHarp.ReqGetSubnetList.subnet:type_name -> MsgType.Subnet
	30, // 8: RpcHarp.ResGetSubnetList.subnet:type_name -> MsgType.Subnet
	31, // 9: RpcHarp.ResGetSubnetList.hccErrorStack:type_name -> MsgType.HccError
	31, // 10: RpcHarp.ResGetSubnetNum.hccErrorStack:type_name -> MsgType.HccError
	30, // 11: RpcHarp.ReqUpdateSubnet.subnet:type_name -> MsgType.Subnet
	30, // 12: RpcHarp.ResUpdateSubnet.subnet:type_name -> MsgType.Subnet
	31, // 13: RpcHarp.ResUpdateSubnet.hccErrorStack:type_name -> MsgType.HccError
	31, // 14: RpcHarp.ResDeleteSubnet.hccErrorStack:type_name -> MsgType.HccError
	32, // 15: RpcHarp.ReqCreateAdaptiveIPSetting.adaptiveip_setting:type_name -> MsgType.AdaptiveIPSetting
	32, // 16: RpcHarp.ResCreateAdaptiveIPSetting.adaptiveip_setting:type_name -> MsgType.AdaptiveIPSetting
	31, // 17: RpcHarp.ResCreateAdaptiveIPSetting.hccErrorStack:type_name -> MsgType.HccError
	32, // 18: RpcHarp.ResGetAdaptiveIPSetting.adaptiveip_setting:type_name -> MsgType.AdaptiveIPSetting
	31, // 19: RpcHarp.ResGetAdaptiveIPSetting.hccErrorStack:type_name -> MsgType.HccError
	33, // 20: RpcHarp.ResGetAdaptiveIPAvailableIPList.adaptiveip_availableip_list:type_name -> MsgType.AdaptiveIPAvailableIPList
	31, // 21: RpcHarp.ResGetAdaptiveIPAvailableIPList.hccErrorStack:type_name -> MsgType.HccError
	34, // 22: RpcHarp.ResCreateAdaptiveIPServer.adaptiveip_server:type_name -> MsgType.AdaptiveIPServer
	31, // 23: RpcHarp.ResCreateAdaptiveIPServer.hccErrorStack:type_name -> MsgType.HccError
	34, // 24: RpcHarp.ResGetAdaptiveIPServer.adaptiveip_server:type_name -> MsgType.AdaptiveIPServer
	31, // 25: RpcHarp.ResGetAdaptiveIPServer.hccErrorStack:type_name -> MsgType.HccError
	34, // 26: RpcHarp.ReqGetAdaptiveIPServerList.adaptiveip_server:type_name -> MsgType.AdaptiveIPServer
	34, // 27: RpcHarp.ResGetAdaptiveIPServerList.adaptiveip_server:type_name -> MsgType.AdaptiveIPServer
	31, // 28: RpcHarp.ResGetAdaptiveIPServerList.hccErrorStack:type_name -> MsgType.HccError
	31, // 29: RpcHarp.ResGetAdaptiveIPServerNum.hccErrorStack:type_name -> MsgType.HccError
	31, // 30: RpcHarp.ResDeleteAdaptiveIPServer.hccErrorStack:type_name -> MsgType.HccError
	31, // 31: RpcHarp.ResCreateDHPCDConf.hccErrorStack:type_name -> MsgType.HccError
	31, // 32: RpcHarp.ResDeleteDHPCDConf.hccErrorStack:type_name -> MsgType.HccError
	0,  // 33: RpcHarp.Harp.CreateSubnet:input_type -> RpcHarp.ReqCreateSubnet
	2,  // 34: RpcHarp.Harp.GetSubnet:input_type -> RpcHarp.ReqGetSubnet
	4,  // 35: RpcHarp.Harp.GetSubnetByServer:input_type -> RpcHarp.ReqGetSubnetByServer
	6,  // 36: RpcHarp.Harp.GetSubnetList:input_type -> RpcHarp.ReqGetSubnetList
	35, // 37: RpcHarp.Harp.GetSubnetNum:input_type -> MsgType.Empty
	9,  // 38: RpcHarp.Harp.UpdateSubnet:input_type -> RpcHarp.ReqUpdateSubnet
	11, // 39: RpcHarp.Harp.DeleteSubnet:input_type -> RpcHarp.ReqDeleteSubnet
	13, // 40: RpcHarp.Harp.CreateAdaptiveIPSetting:input_type -> RpcHarp.ReqCreateAdaptiveIPSetting
	35, // 41: RpcHarp.Harp.GetAdaptiveIPSetting:input_type -> MsgType.Empty
	35, // 42: RpcHarp.Harp.GetAdaptiveIPAvailableIPList:input_type -> MsgType.Empty
	17, // 43: RpcHarp.Harp.CreateAdaptiveIPServer:input_type -> RpcHarp.ReqCreateAdaptiveIPServer
	19, // 44: RpcHarp.Harp.GetAdaptiveIPServer:input_type -> RpcHarp.ReqGetAdaptiveIPServer
	21, // 45: RpcHarp.Harp.GetAdaptiveIPServerList:input_type -> RpcHarp.ReqGetAdaptiveIPServerList
	35, // 46: RpcHarp.Harp.GetAdaptiveIPServerNum:input_type -> MsgType.Empty
	24, // 47: RpcHarp.Harp.DeleteAdaptiveIPServer:input_type -> RpcHarp.ReqDeleteAdaptiveIPServer
	26, // 48: RpcHarp.Harp.CreateDHPCDConf:input_type -> RpcHarp.ReqCreateDHPCDConf
	28, // 49: RpcHarp.Harp.DeleteDHPCDConf:input_type -> RpcHarp.ReqDeleteDHPCDConf
	1,  // 50: RpcHarp.Harp.CreateSubnet:output_type -> RpcHarp.ResCreateSubnet
	3,  // 51: RpcHarp.Harp.GetSubnet:output_type -> RpcHarp.ResGetSubnet
	5,  // 52: RpcHarp.Harp.GetSubnetByServer:output_type -> RpcHarp.ResGetSubnetByServer
	7,  // 53: RpcHarp.Harp.GetSubnetList:output_type -> RpcHarp.ResGetSubnetList
	8,  // 54: RpcHarp.Harp.GetSubnetNum:output_type -> RpcHarp.ResGetSubnetNum
	10, // 55: RpcHarp.Harp.UpdateSubnet:output_type -> RpcHarp.ResUpdateSubnet
	12, // 56: RpcHarp.Harp.DeleteSubnet:output_type -> RpcHarp.ResDeleteSubnet
	14, // 57: RpcHarp.Harp.CreateAdaptiveIPSetting:output_type -> RpcHarp.ResCreateAdaptiveIPSetting
	15, // 58: RpcHarp.Harp.GetAdaptiveIPSetting:output_type -> RpcHarp.ResGetAdaptiveIPSetting
	16, // 59: RpcHarp.Harp.GetAdaptiveIPAvailableIPList:output_type -> RpcHarp.ResGetAdaptiveIPAvailableIPList
	18, // 60: RpcHarp.Harp.CreateAdaptiveIPServer:output_type -> RpcHarp.ResCreateAdaptiveIPServer
	20, // 61: RpcHarp.Harp.GetAdaptiveIPServer:output_type -> RpcHarp.ResGetAdaptiveIPServer
	22, // 62: RpcHarp.Harp.GetAdaptiveIPServerList:output_type -> RpcHarp.ResGetAdaptiveIPServerList
	23, // 63: RpcHarp.Harp.GetAdaptiveIPServerNum:output_type -> RpcHarp.ResGetAdaptiveIPServerNum
	25, // 64: RpcHarp.Harp.DeleteAdaptiveIPServer:output_type -> RpcHarp.ResDeleteAdaptiveIPServer
	27, // 65: RpcHarp.Harp.CreateDHPCDConf:output_type -> RpcHarp.ResCreateDHPCDConf
	29, // 66: RpcHarp.Harp.DeleteDHPCDConf:output_type -> RpcHarp.ResDeleteDHPCDConf
	50, // [50:67] is the sub-list for method output_type
	33, // [33:50] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_harp_proto_init() }
func file_harp_proto_init() {
	if File_harp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_harp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCreateSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetSubnetByServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetSubnetByServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetSubnetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetSubnetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetSubnetNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResUpdateSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDeleteSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateAdaptiveIPSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCreateAdaptiveIPSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetAdaptiveIPSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetAdaptiveIPAvailableIPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateAdaptiveIPServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCreateAdaptiveIPServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAdaptiveIPServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetAdaptiveIPServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAdaptiveIPServerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetAdaptiveIPServerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetAdaptiveIPServerNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteAdaptiveIPServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDeleteAdaptiveIPServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateDHPCDConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCreateDHPCDConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteDHPCDConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_harp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDeleteDHPCDConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_harp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_harp_proto_goTypes,
		DependencyIndexes: file_harp_proto_depIdxs,
		MessageInfos:      file_harp_proto_msgTypes,
	}.Build()
	File_harp_proto = out.File
	file_harp_proto_rawDesc = nil
	file_harp_proto_goTypes = nil
	file_harp_proto_depIdxs = nil
}
