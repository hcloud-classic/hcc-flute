// Copyright 2020 by YounSeok.Shim and ish.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v4.0.0
// source: flute.proto

package rpcflute

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "hcc/flute/action/grpc/pb/rpcgraphql"
	rpcmsgType "hcc/flute/action/grpc/pb/rpcmsgType"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Symbols defined in public import of msgType.proto.

type Empty = rpcmsgType.Empty
type HccError = rpcmsgType.HccError
type Node = rpcmsgType.Node
type NodeDetail = rpcmsgType.NodeDetail
type Server = rpcmsgType.Server
type ServerNode = rpcmsgType.ServerNode
type Quota = rpcmsgType.Quota
type VNC = rpcmsgType.VNC
type Volume = rpcmsgType.Volume
type VolumeAttachment = rpcmsgType.VolumeAttachment
type Pool = rpcmsgType.Pool
type AdaptiveIPSetting = rpcmsgType.AdaptiveIPSetting
type AdaptiveIPAvailableIPList = rpcmsgType.AdaptiveIPAvailableIPList
type AdaptiveIPServer = rpcmsgType.AdaptiveIPServer
type Subnet = rpcmsgType.Subnet
type Series = rpcmsgType.Series
type MetricInfo = rpcmsgType.MetricInfo
type MonitoringData = rpcmsgType.MonitoringData
type NormalAction = rpcmsgType.NormalAction
type HccAction = rpcmsgType.HccAction
type Action = rpcmsgType.Action
type Control = rpcmsgType.Control
type Controls = rpcmsgType.Controls
type ScheduledNodes = rpcmsgType.ScheduledNodes
type ScheduleServer = rpcmsgType.ScheduleServer

// IPMI
type PowerState int32

const (
	PowerState_ON            PowerState = 0
	PowerState_OFF           PowerState = 1
	PowerState_FORCE_OFF     PowerState = 2
	PowerState_FORCE_RESTART PowerState = 3
)

// Enum value maps for PowerState.
var (
	PowerState_name = map[int32]string{
		0: "ON",
		1: "OFF",
		2: "FORCE_OFF",
		3: "FORCE_RESTART",
	}
	PowerState_value = map[string]int32{
		"ON":            0,
		"OFF":           1,
		"FORCE_OFF":     2,
		"FORCE_RESTART": 3,
	}
)

func (x PowerState) Enum() *PowerState {
	p := new(PowerState)
	*p = x
	return p
}

func (x PowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_flute_proto_enumTypes[0].Descriptor()
}

func (PowerState) Type() protoreflect.EnumType {
	return &file_flute_proto_enumTypes[0]
}

func (x PowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerState.Descriptor instead.
func (PowerState) EnumDescriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{0}
}

// Node
type ReqCreateNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *rpcmsgType.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *ReqCreateNode) Reset() {
	*x = ReqCreateNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateNode) ProtoMessage() {}

func (x *ReqCreateNode) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateNode.ProtoReflect.Descriptor instead.
func (*ReqCreateNode) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{0}
}

func (x *ReqCreateNode) GetNode() *rpcmsgType.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type ResCreateNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node          *rpcmsgType.Node       `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResCreateNode) Reset() {
	*x = ResCreateNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCreateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCreateNode) ProtoMessage() {}

func (x *ResCreateNode) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCreateNode.ProtoReflect.Descriptor instead.
func (*ResCreateNode) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{1}
}

func (x *ResCreateNode) GetNode() *rpcmsgType.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ResCreateNode) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *ReqGetNode) Reset() {
	*x = ReqGetNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetNode) ProtoMessage() {}

func (x *ReqGetNode) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetNode.ProtoReflect.Descriptor instead.
func (*ReqGetNode) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{2}
}

func (x *ReqGetNode) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ResGetNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node          *rpcmsgType.Node       `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetNode) Reset() {
	*x = ResGetNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetNode) ProtoMessage() {}

func (x *ResGetNode) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetNode.ProtoReflect.Descriptor instead.
func (*ResGetNode) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{3}
}

func (x *ResGetNode) GetNode() *rpcmsgType.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ResGetNode) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetNodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *rpcmsgType.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Row  int64            `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
	Page int64            `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ReqGetNodeList) Reset() {
	*x = ReqGetNodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetNodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetNodeList) ProtoMessage() {}

func (x *ReqGetNodeList) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetNodeList.ProtoReflect.Descriptor instead.
func (*ReqGetNodeList) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{4}
}

func (x *ReqGetNodeList) GetNode() *rpcmsgType.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ReqGetNodeList) GetRow() int64 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *ReqGetNodeList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ResGetNodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node          []*rpcmsgType.Node     `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetNodeList) Reset() {
	*x = ResGetNodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetNodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetNodeList) ProtoMessage() {}

func (x *ResGetNodeList) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetNodeList.ProtoReflect.Descriptor instead.
func (*ResGetNodeList) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{5}
}

func (x *ResGetNodeList) GetNode() []*rpcmsgType.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ResGetNodeList) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ResGetNodeNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num           int64                  `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetNodeNum) Reset() {
	*x = ResGetNodeNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetNodeNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetNodeNum) ProtoMessage() {}

func (x *ResGetNodeNum) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetNodeNum.ProtoReflect.Descriptor instead.
func (*ResGetNodeNum) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{6}
}

func (x *ResGetNodeNum) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ResGetNodeNum) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqUpdateNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *rpcmsgType.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *ReqUpdateNode) Reset() {
	*x = ReqUpdateNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateNode) ProtoMessage() {}

func (x *ReqUpdateNode) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateNode.ProtoReflect.Descriptor instead.
func (*ReqUpdateNode) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{7}
}

func (x *ReqUpdateNode) GetNode() *rpcmsgType.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type ResUpdateNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node          *rpcmsgType.Node       `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResUpdateNode) Reset() {
	*x = ResUpdateNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResUpdateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResUpdateNode) ProtoMessage() {}

func (x *ResUpdateNode) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResUpdateNode.ProtoReflect.Descriptor instead.
func (*ResUpdateNode) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{8}
}

func (x *ResUpdateNode) GetNode() *rpcmsgType.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ResUpdateNode) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqDeleteNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *ReqDeleteNode) Reset() {
	*x = ReqDeleteNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteNode) ProtoMessage() {}

func (x *ReqDeleteNode) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteNode.ProtoReflect.Descriptor instead.
func (*ReqDeleteNode) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{9}
}

func (x *ReqDeleteNode) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ResDeleteNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID          string                 `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResDeleteNode) Reset() {
	*x = ResDeleteNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDeleteNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDeleteNode) ProtoMessage() {}

func (x *ResDeleteNode) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDeleteNode.ProtoReflect.Descriptor instead.
func (*ResDeleteNode) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{10}
}

func (x *ResDeleteNode) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ResDeleteNode) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

// NodeDetail
type ReqCreateNodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeDetail *rpcmsgType.NodeDetail `protobuf:"bytes,1,opt,name=node_detail,json=nodeDetail,proto3" json:"node_detail,omitempty"`
}

func (x *ReqCreateNodeDetail) Reset() {
	*x = ReqCreateNodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateNodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateNodeDetail) ProtoMessage() {}

func (x *ReqCreateNodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateNodeDetail.ProtoReflect.Descriptor instead.
func (*ReqCreateNodeDetail) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{11}
}

func (x *ReqCreateNodeDetail) GetNodeDetail() *rpcmsgType.NodeDetail {
	if x != nil {
		return x.NodeDetail
	}
	return nil
}

type ResCreateNodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeDetail    *rpcmsgType.NodeDetail `protobuf:"bytes,1,opt,name=node_detail,json=nodeDetail,proto3" json:"node_detail,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResCreateNodeDetail) Reset() {
	*x = ResCreateNodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCreateNodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCreateNodeDetail) ProtoMessage() {}

func (x *ResCreateNodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCreateNodeDetail.ProtoReflect.Descriptor instead.
func (*ResCreateNodeDetail) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{12}
}

func (x *ResCreateNodeDetail) GetNodeDetail() *rpcmsgType.NodeDetail {
	if x != nil {
		return x.NodeDetail
	}
	return nil
}

func (x *ResCreateNodeDetail) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqGetNodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeUUID string `protobuf:"bytes,1,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
}

func (x *ReqGetNodeDetail) Reset() {
	*x = ReqGetNodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetNodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetNodeDetail) ProtoMessage() {}

func (x *ReqGetNodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetNodeDetail.ProtoReflect.Descriptor instead.
func (*ReqGetNodeDetail) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{13}
}

func (x *ReqGetNodeDetail) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

type ResGetNodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeDetail    *rpcmsgType.NodeDetail `protobuf:"bytes,1,opt,name=node_detail,json=nodeDetail,proto3" json:"node_detail,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResGetNodeDetail) Reset() {
	*x = ResGetNodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetNodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetNodeDetail) ProtoMessage() {}

func (x *ResGetNodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetNodeDetail.ProtoReflect.Descriptor instead.
func (*ResGetNodeDetail) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{14}
}

func (x *ResGetNodeDetail) GetNodeDetail() *rpcmsgType.NodeDetail {
	if x != nil {
		return x.NodeDetail
	}
	return nil
}

func (x *ResGetNodeDetail) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqDeleteNodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeUUID string `protobuf:"bytes,1,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
}

func (x *ReqDeleteNodeDetail) Reset() {
	*x = ReqDeleteNodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteNodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteNodeDetail) ProtoMessage() {}

func (x *ReqDeleteNodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteNodeDetail.ProtoReflect.Descriptor instead.
func (*ReqDeleteNodeDetail) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{15}
}

func (x *ReqDeleteNodeDetail) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

type ResDeleteNodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeUUID      string                 `protobuf:"bytes,1,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResDeleteNodeDetail) Reset() {
	*x = ResDeleteNodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDeleteNodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDeleteNodeDetail) ProtoMessage() {}

func (x *ResDeleteNodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDeleteNodeDetail.ProtoReflect.Descriptor instead.
func (*ResDeleteNodeDetail) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{16}
}

func (x *ResDeleteNodeDetail) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

func (x *ResDeleteNodeDetail) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqNodePowerControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node       []*rpcmsgType.Node `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	PowerState PowerState         `protobuf:"varint,2,opt,name=power_state,json=powerState,proto3,enum=RpcFlute.PowerState" json:"power_state,omitempty"`
}

func (x *ReqNodePowerControl) Reset() {
	*x = ReqNodePowerControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqNodePowerControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqNodePowerControl) ProtoMessage() {}

func (x *ReqNodePowerControl) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqNodePowerControl.ProtoReflect.Descriptor instead.
func (*ReqNodePowerControl) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{17}
}

func (x *ReqNodePowerControl) GetNode() []*rpcmsgType.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ReqNodePowerControl) GetPowerState() PowerState {
	if x != nil {
		return x.PowerState
	}
	return PowerState_ON
}

type ResNodePowerControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        []string               `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResNodePowerControl) Reset() {
	*x = ResNodePowerControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNodePowerControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNodePowerControl) ProtoMessage() {}

func (x *ResNodePowerControl) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNodePowerControl.ProtoReflect.Descriptor instead.
func (*ResNodePowerControl) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{18}
}

func (x *ResNodePowerControl) GetResult() []string {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ResNodePowerControl) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

type ReqNodePowerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *ReqNodePowerState) Reset() {
	*x = ReqNodePowerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqNodePowerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqNodePowerState) ProtoMessage() {}

func (x *ReqNodePowerState) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqNodePowerState.ProtoReflect.Descriptor instead.
func (*ReqNodePowerState) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{19}
}

func (x *ReqNodePowerState) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ResNodePowerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	HccErrorStack []*rpcmsgType.HccError `protobuf:"bytes,2,rep,name=hccErrorStack,proto3" json:"hccErrorStack,omitempty"`
}

func (x *ResNodePowerState) Reset() {
	*x = ResNodePowerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flute_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNodePowerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNodePowerState) ProtoMessage() {}

func (x *ResNodePowerState) ProtoReflect() protoreflect.Message {
	mi := &file_flute_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNodePowerState.ProtoReflect.Descriptor instead.
func (*ResNodePowerState) Descriptor() ([]byte, []int) {
	return file_flute_proto_rawDescGZIP(), []int{20}
}

func (x *ResNodePowerState) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ResNodePowerState) GetHccErrorStack() []*rpcmsgType.HccError {
	if x != nil {
		return x.HccErrorStack
	}
	return nil
}

var File_flute_proto protoreflect.FileDescriptor

var file_flute_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x66, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x52,
	0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x1a, 0x0d, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x6b, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a,
	0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48,
	0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x20, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x68, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x22, 0x59, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x6c, 0x0a,
	0x0e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63,
	0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x5a, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x37,
	0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x32, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x6b, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x23, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x5c, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63,
	0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x4b, 0x0a, 0x13, 0x52,
	0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x34, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x34, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22,
	0x2e, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22,
	0x81, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63,
	0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x22, 0x31, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0x6a, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x22, 0x6f, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x66, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63,
	0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x27, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x48, 0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x63, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x2a, 0x3f, 0x0a, 0x0a, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x32, 0x82, 0x08, 0x0a, 0x05,
	0x46, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x17, 0x2e, 0x52,
	0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x12, 0xba, 0x43, 0x0f, 0x08, 0x01, 0x12, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x14, 0x2e, 0x52, 0x70, 0x63,
	0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x22, 0x09, 0xba, 0x43, 0x06, 0x12, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x52, 0x70, 0x63,
	0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x0e,
	0xba, 0x43, 0x0b, 0x12, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x0e, 0x2e, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x52,
	0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x0d, 0xba, 0x43, 0x0a, 0x12, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x12, 0x52, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x17, 0x2e, 0x52, 0x70,
	0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x22, 0x12, 0xba, 0x43, 0x0f, 0x08, 0x01, 0x12, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x1a,
	0x17, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x12, 0xba, 0x43, 0x0f, 0x08, 0x01, 0x12,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a,
	0x1d, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x19,
	0xba, 0x43, 0x16, 0x08, 0x01, 0x12, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x59, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x52, 0x70, 0x63,
	0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x1a, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x22, 0x10, 0xba, 0x43, 0x0d, 0x12, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x6b, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c,
	0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x1d, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x19, 0xba, 0x43, 0x16, 0x08, 0x01, 0x12, 0x12, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x6b, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1d, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x1d, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x22, 0x19, 0xba, 0x43, 0x16, 0x08, 0x01, 0x12, 0x12, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x64,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x1b, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6c, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x15, 0xba,
	0x43, 0x12, 0x12, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x1a, 0xba, 0x43, 0x17, 0x0a, 0x13, 0x31, 0x39, 0x32, 0x2e, 0x31,
	0x36, 0x38, 0x2e, 0x31, 0x31, 0x30, 0x2e, 0x31, 0x30, 0x3a, 0x37, 0x30, 0x30, 0x30, 0x10, 0x01,
	0x42, 0x23, 0x5a, 0x21, 0x68, 0x63, 0x63, 0x2f, 0x66, 0x6c, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63,
	0x66, 0x6c, 0x75, 0x74, 0x65, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flute_proto_rawDescOnce sync.Once
	file_flute_proto_rawDescData = file_flute_proto_rawDesc
)

func file_flute_proto_rawDescGZIP() []byte {
	file_flute_proto_rawDescOnce.Do(func() {
		file_flute_proto_rawDescData = protoimpl.X.CompressGZIP(file_flute_proto_rawDescData)
	})
	return file_flute_proto_rawDescData
}

var file_flute_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flute_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_flute_proto_goTypes = []interface{}{
	(PowerState)(0),               // 0: RpcFlute.PowerState
	(*ReqCreateNode)(nil),         // 1: RpcFlute.ReqCreateNode
	(*ResCreateNode)(nil),         // 2: RpcFlute.ResCreateNode
	(*ReqGetNode)(nil),            // 3: RpcFlute.ReqGetNode
	(*ResGetNode)(nil),            // 4: RpcFlute.ResGetNode
	(*ReqGetNodeList)(nil),        // 5: RpcFlute.ReqGetNodeList
	(*ResGetNodeList)(nil),        // 6: RpcFlute.ResGetNodeList
	(*ResGetNodeNum)(nil),         // 7: RpcFlute.ResGetNodeNum
	(*ReqUpdateNode)(nil),         // 8: RpcFlute.ReqUpdateNode
	(*ResUpdateNode)(nil),         // 9: RpcFlute.ResUpdateNode
	(*ReqDeleteNode)(nil),         // 10: RpcFlute.ReqDeleteNode
	(*ResDeleteNode)(nil),         // 11: RpcFlute.ResDeleteNode
	(*ReqCreateNodeDetail)(nil),   // 12: RpcFlute.ReqCreateNodeDetail
	(*ResCreateNodeDetail)(nil),   // 13: RpcFlute.ResCreateNodeDetail
	(*ReqGetNodeDetail)(nil),      // 14: RpcFlute.ReqGetNodeDetail
	(*ResGetNodeDetail)(nil),      // 15: RpcFlute.ResGetNodeDetail
	(*ReqDeleteNodeDetail)(nil),   // 16: RpcFlute.ReqDeleteNodeDetail
	(*ResDeleteNodeDetail)(nil),   // 17: RpcFlute.ResDeleteNodeDetail
	(*ReqNodePowerControl)(nil),   // 18: RpcFlute.ReqNodePowerControl
	(*ResNodePowerControl)(nil),   // 19: RpcFlute.ResNodePowerControl
	(*ReqNodePowerState)(nil),     // 20: RpcFlute.ReqNodePowerState
	(*ResNodePowerState)(nil),     // 21: RpcFlute.ResNodePowerState
	(*rpcmsgType.Node)(nil),       // 22: MsgType.Node
	(*rpcmsgType.HccError)(nil),   // 23: MsgType.HccError
	(*rpcmsgType.NodeDetail)(nil), // 24: MsgType.NodeDetail
	(*rpcmsgType.Empty)(nil),      // 25: MsgType.Empty
}
var file_flute_proto_depIdxs = []int32{
	22, // 0: RpcFlute.ReqCreateNode.node:type_name -> MsgType.Node
	22, // 1: RpcFlute.ResCreateNode.node:type_name -> MsgType.Node
	23, // 2: RpcFlute.ResCreateNode.hccErrorStack:type_name -> MsgType.HccError
	22, // 3: RpcFlute.ResGetNode.node:type_name -> MsgType.Node
	23, // 4: RpcFlute.ResGetNode.hccErrorStack:type_name -> MsgType.HccError
	22, // 5: RpcFlute.ReqGetNodeList.node:type_name -> MsgType.Node
	22, // 6: RpcFlute.ResGetNodeList.node:type_name -> MsgType.Node
	23, // 7: RpcFlute.ResGetNodeList.hccErrorStack:type_name -> MsgType.HccError
	23, // 8: RpcFlute.ResGetNodeNum.hccErrorStack:type_name -> MsgType.HccError
	22, // 9: RpcFlute.ReqUpdateNode.node:type_name -> MsgType.Node
	22, // 10: RpcFlute.ResUpdateNode.node:type_name -> MsgType.Node
	23, // 11: RpcFlute.ResUpdateNode.hccErrorStack:type_name -> MsgType.HccError
	23, // 12: RpcFlute.ResDeleteNode.hccErrorStack:type_name -> MsgType.HccError
	24, // 13: RpcFlute.ReqCreateNodeDetail.node_detail:type_name -> MsgType.NodeDetail
	24, // 14: RpcFlute.ResCreateNodeDetail.node_detail:type_name -> MsgType.NodeDetail
	23, // 15: RpcFlute.ResCreateNodeDetail.hccErrorStack:type_name -> MsgType.HccError
	24, // 16: RpcFlute.ResGetNodeDetail.node_detail:type_name -> MsgType.NodeDetail
	23, // 17: RpcFlute.ResGetNodeDetail.hccErrorStack:type_name -> MsgType.HccError
	23, // 18: RpcFlute.ResDeleteNodeDetail.hccErrorStack:type_name -> MsgType.HccError
	22, // 19: RpcFlute.ReqNodePowerControl.node:type_name -> MsgType.Node
	0,  // 20: RpcFlute.ReqNodePowerControl.power_state:type_name -> RpcFlute.PowerState
	23, // 21: RpcFlute.ResNodePowerControl.hccErrorStack:type_name -> MsgType.HccError
	23, // 22: RpcFlute.ResNodePowerState.hccErrorStack:type_name -> MsgType.HccError
	1,  // 23: RpcFlute.Flute.CreateNode:input_type -> RpcFlute.ReqCreateNode
	3,  // 24: RpcFlute.Flute.GetNode:input_type -> RpcFlute.ReqGetNode
	5,  // 25: RpcFlute.Flute.GetNodeList:input_type -> RpcFlute.ReqGetNodeList
	25, // 26: RpcFlute.Flute.GetNodeNum:input_type -> MsgType.Empty
	8,  // 27: RpcFlute.Flute.UpdateNode:input_type -> RpcFlute.ReqUpdateNode
	10, // 28: RpcFlute.Flute.DeleteNode:input_type -> RpcFlute.ReqDeleteNode
	12, // 29: RpcFlute.Flute.CreateNodeDetail:input_type -> RpcFlute.ReqCreateNodeDetail
	14, // 30: RpcFlute.Flute.GetNodeDetail:input_type -> RpcFlute.ReqGetNodeDetail
	16, // 31: RpcFlute.Flute.DeleteNodeDetail:input_type -> RpcFlute.ReqDeleteNodeDetail
	18, // 32: RpcFlute.Flute.NodePowerControl:input_type -> RpcFlute.ReqNodePowerControl
	20, // 33: RpcFlute.Flute.GetNodePowerState:input_type -> RpcFlute.ReqNodePowerState
	2,  // 34: RpcFlute.Flute.CreateNode:output_type -> RpcFlute.ResCreateNode
	4,  // 35: RpcFlute.Flute.GetNode:output_type -> RpcFlute.ResGetNode
	6,  // 36: RpcFlute.Flute.GetNodeList:output_type -> RpcFlute.ResGetNodeList
	7,  // 37: RpcFlute.Flute.GetNodeNum:output_type -> RpcFlute.ResGetNodeNum
	9,  // 38: RpcFlute.Flute.UpdateNode:output_type -> RpcFlute.ResUpdateNode
	11, // 39: RpcFlute.Flute.DeleteNode:output_type -> RpcFlute.ResDeleteNode
	13, // 40: RpcFlute.Flute.CreateNodeDetail:output_type -> RpcFlute.ResCreateNodeDetail
	15, // 41: RpcFlute.Flute.GetNodeDetail:output_type -> RpcFlute.ResGetNodeDetail
	17, // 42: RpcFlute.Flute.DeleteNodeDetail:output_type -> RpcFlute.ResDeleteNodeDetail
	19, // 43: RpcFlute.Flute.NodePowerControl:output_type -> RpcFlute.ResNodePowerControl
	21, // 44: RpcFlute.Flute.GetNodePowerState:output_type -> RpcFlute.ResNodePowerState
	34, // [34:45] is the sub-list for method output_type
	23, // [23:34] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_flute_proto_init() }
func file_flute_proto_init() {
	if File_flute_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCreateNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetNodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetNodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetNodeNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResUpdateNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDeleteNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateNodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCreateNodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetNodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetNodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteNodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDeleteNodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqNodePowerControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNodePowerControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqNodePowerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flute_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNodePowerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flute_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flute_proto_goTypes,
		DependencyIndexes: file_flute_proto_depIdxs,
		EnumInfos:         file_flute_proto_enumTypes,
		MessageInfos:      file_flute_proto_msgTypes,
	}.Build()
	File_flute_proto = out.File
	file_flute_proto_rawDesc = nil
	file_flute_proto_goTypes = nil
	file_flute_proto_depIdxs = nil
}
