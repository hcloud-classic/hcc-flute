// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpcflute

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FluteClient is the client API for Flute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FluteClient interface {
	OnOffNode(ctx context.Context, in *ReqOnOffNode, opts ...grpc.CallOption) (*ResOnOffNode, error)
	CreateNode(ctx context.Context, in *ReqFlute, opts ...grpc.CallOption) (*ResFlute, error)
}

type fluteClient struct {
	cc grpc.ClientConnInterface
}

func NewFluteClient(cc grpc.ClientConnInterface) FluteClient {
	return &fluteClient{cc}
}

func (c *fluteClient) OnOffNode(ctx context.Context, in *ReqOnOffNode, opts ...grpc.CallOption) (*ResOnOffNode, error) {
	out := new(ResOnOffNode)
	err := c.cc.Invoke(ctx, "/RpcFlute.Flute/OnOffNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluteClient) CreateNode(ctx context.Context, in *ReqFlute, opts ...grpc.CallOption) (*ResFlute, error) {
	out := new(ResFlute)
	err := c.cc.Invoke(ctx, "/RpcFlute.Flute/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FluteServer is the server API for Flute service.
// All implementations must embed UnimplementedFluteServer
// for forward compatibility
type FluteServer interface {
	OnOffNode(context.Context, *ReqOnOffNode) (*ResOnOffNode, error)
	CreateNode(context.Context, *ReqFlute) (*ResFlute, error)
	mustEmbedUnimplementedFluteServer()
}

// UnimplementedFluteServer must be embedded to have forward compatible implementations.
type UnimplementedFluteServer struct {
}

func (*UnimplementedFluteServer) OnOffNode(context.Context, *ReqOnOffNode) (*ResOnOffNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnOffNode not implemented")
}
func (*UnimplementedFluteServer) CreateNode(context.Context, *ReqFlute) (*ResFlute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (*UnimplementedFluteServer) mustEmbedUnimplementedFluteServer() {}

func RegisterFluteServer(s *grpc.Server, srv FluteServer) {
	s.RegisterService(&_Flute_serviceDesc, srv)
}

func _Flute_OnOffNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOnOffNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluteServer).OnOffNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcFlute.Flute/OnOffNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluteServer).OnOffNode(ctx, req.(*ReqOnOffNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flute_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFlute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluteServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcFlute.Flute/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluteServer).CreateNode(ctx, req.(*ReqFlute))
	}
	return interceptor(ctx, in, info, handler)
}

var _Flute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RpcFlute.Flute",
	HandlerType: (*FluteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnOffNode",
			Handler:    _Flute_OnOffNode_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _Flute_CreateNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flute.proto",
}
