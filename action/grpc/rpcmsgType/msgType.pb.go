// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: msgType.proto

package rpcmsgType

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VNC_VNCAction int32

const (
	VNC_CREATE VNC_VNCAction = 0
	VNC_DELETE VNC_VNCAction = 1
)

// Enum value maps for VNC_VNCAction.
var (
	VNC_VNCAction_name = map[int32]string{
		0: "CREATE",
		1: "DELETE",
	}
	VNC_VNCAction_value = map[string]int32{
		"CREATE": 0,
		"DELETE": 1,
	}
)

func (x VNC_VNCAction) Enum() *VNC_VNCAction {
	p := new(VNC_VNCAction)
	*p = x
	return p
}

func (x VNC_VNCAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VNC_VNCAction) Descriptor() protoreflect.EnumDescriptor {
	return file_msgType_proto_enumTypes[0].Descriptor()
}

func (VNC_VNCAction) Type() protoreflect.EnumType {
	return &file_msgType_proto_enumTypes[0]
}

func (x VNC_VNCAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VNC_VNCAction.Descriptor instead.
func (VNC_VNCAction) EnumDescriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{4, 0}
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	BmcMacAddr  string               `protobuf:"bytes,2,opt,name=bmc_mac_addr,json=bmcMacAddr,proto3" json:"bmc_mac_addr,omitempty"`
	BmcIp       string               `protobuf:"bytes,3,opt,name=bmc_ip,json=bmcIp,proto3" json:"bmc_ip,omitempty"`
	PXEMacAddr  string               `protobuf:"bytes,4,opt,name=PXE_mac_addr,json=PXEMacAddr,proto3" json:"PXE_mac_addr,omitempty"`
	Status      string               `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Description string               `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	CPUCores    int32                `protobuf:"varint,7,opt,name=CPU_cores,json=CPUCores,proto3" json:"CPU_cores,omitempty"`
	Memory      int32                `protobuf:"varint,8,opt,name=memory,proto3" json:"memory,omitempty"`
	Active      int32                `protobuf:"varint,9,opt,name=active,proto3" json:"active,omitempty"`
	CreateAt    *timestamp.Timestamp `protobuf:"bytes,10,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	ForceOff    bool                 `protobuf:"varint,11,opt,name=force_off,json=forceOff,proto3" json:"force_off,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Node) GetBmcMacAddr() string {
	if x != nil {
		return x.BmcMacAddr
	}
	return ""
}

func (x *Node) GetBmcIp() string {
	if x != nil {
		return x.BmcIp
	}
	return ""
}

func (x *Node) GetPXEMacAddr() string {
	if x != nil {
		return x.PXEMacAddr
	}
	return ""
}

func (x *Node) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetCPUCores() int32 {
	if x != nil {
		return x.CPUCores
	}
	return 0
}

func (x *Node) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Node) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *Node) GetCreateAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *Node) GetForceOff() bool {
	if x != nil {
		return x.ForceOff
	}
	return false
}

type NodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node_UUID    string `protobuf:"bytes,1,opt,name=node_UUID,json=nodeUUID,proto3" json:"node_UUID,omitempty"`
	CPUModel     string `protobuf:"bytes,2,opt,name=CPU_model,json=CPUModel,proto3" json:"CPU_model,omitempty"`
	CPUProcessor int32  `protobuf:"varint,3,opt,name=CPU_processor,json=CPUProcessor,proto3" json:"CPU_processor,omitempty"`
	CPUThread    int32  `protobuf:"varint,4,opt,name=CPU_thread,json=CPUThread,proto3" json:"CPU_thread,omitempty"`
}

func (x *NodeDetail) Reset() {
	*x = NodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetail) ProtoMessage() {}

func (x *NodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetail.ProtoReflect.Descriptor instead.
func (*NodeDetail) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{1}
}

func (x *NodeDetail) GetNode_UUID() string {
	if x != nil {
		return x.Node_UUID
	}
	return ""
}

func (x *NodeDetail) GetCPUModel() string {
	if x != nil {
		return x.CPUModel
	}
	return ""
}

func (x *NodeDetail) GetCPUProcessor() int32 {
	if x != nil {
		return x.CPUProcessor
	}
	return 0
}

func (x *NodeDetail) GetCPUThread() int32 {
	if x != nil {
		return x.CPUThread
	}
	return 0
}

type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Subnet_UUID string               `protobuf:"bytes,2,opt,name=subnet_UUID,json=subnetUUID,proto3" json:"subnet_UUID,omitempty"`
	OS          string               `protobuf:"bytes,3,opt,name=OS,proto3" json:"OS,omitempty"`
	ServerName  string               `protobuf:"bytes,4,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	ServerDesc  string               `protobuf:"bytes,5,opt,name=server_desc,json=serverDesc,proto3" json:"server_desc,omitempty"`
	CPU         int32                `protobuf:"varint,6,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Memory      int32                `protobuf:"varint,7,opt,name=memory,proto3" json:"memory,omitempty"`
	DiskSize    int32                `protobuf:"varint,8,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	Status      string               `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	User_UUID   string               `protobuf:"bytes,10,opt,name=user_UUID,json=userUUID,proto3" json:"user_UUID,omitempty"`
	CreateAt    *timestamp.Timestamp `protobuf:"bytes,11,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{2}
}

func (x *Server) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Server) GetSubnet_UUID() string {
	if x != nil {
		return x.Subnet_UUID
	}
	return ""
}

func (x *Server) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *Server) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *Server) GetServerDesc() string {
	if x != nil {
		return x.ServerDesc
	}
	return ""
}

func (x *Server) GetCPU() int32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *Server) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Server) GetDiskSize() int32 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *Server) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Server) GetUser_UUID() string {
	if x != nil {
		return x.User_UUID
	}
	return ""
}

func (x *Server) GetCreateAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

type ServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Server_UUID string               `protobuf:"bytes,2,opt,name=server_UUID,json=serverUUID,proto3" json:"server_UUID,omitempty"`
	Node_UUID   string               `protobuf:"bytes,3,opt,name=node_UUID,json=nodeUUID,proto3" json:"node_UUID,omitempty"`
	CreateAt    *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (x *ServerNode) Reset() {
	*x = ServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNode) ProtoMessage() {}

func (x *ServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNode.ProtoReflect.Descriptor instead.
func (*ServerNode) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{3}
}

func (x *ServerNode) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ServerNode) GetServer_UUID() string {
	if x != nil {
		return x.Server_UUID
	}
	return ""
}

func (x *ServerNode) GetNode_UUID() string {
	if x != nil {
		return x.Node_UUID
	}
	return ""
}

func (x *ServerNode) GetCreateAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

type VNC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string        `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Server_UUID string        `protobuf:"bytes,2,opt,name=server_UUID,json=serverUUID,proto3" json:"server_UUID,omitempty"`
	Action      VNC_VNCAction `protobuf:"varint,3,opt,name=action,proto3,enum=MsgType.VNC_VNCAction" json:"action,omitempty"`
}

func (x *VNC) Reset() {
	*x = VNC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNC) ProtoMessage() {}

func (x *VNC) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNC.ProtoReflect.Descriptor instead.
func (*VNC) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{4}
}

func (x *VNC) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *VNC) GetServer_UUID() string {
	if x != nil {
		return x.Server_UUID
	}
	return ""
}

func (x *VNC) GetAction() VNC_VNCAction {
	if x != nil {
		return x.Action
	}
	return VNC_CREATE
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Size        string               `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Filesystem  string               `protobuf:"bytes,3,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	Server_UUID string               `protobuf:"bytes,4,opt,name=server_UUID,json=serverUUID,proto3" json:"server_UUID,omitempty"`
	UseType     string               `protobuf:"bytes,5,opt,name=use_type,json=useType,proto3" json:"use_type,omitempty"`
	User_UUID   string               `protobuf:"bytes,6,opt,name=user_UUID,json=userUUID,proto3" json:"user_UUID,omitempty"`
	CreateAt    *timestamp.Timestamp `protobuf:"bytes,7,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Network_IP  string               `protobuf:"bytes,8,opt,name=network_IP,json=networkIP,proto3" json:"network_IP,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{5}
}

func (x *Volume) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Volume) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Volume) GetFilesystem() string {
	if x != nil {
		return x.Filesystem
	}
	return ""
}

func (x *Volume) GetServer_UUID() string {
	if x != nil {
		return x.Server_UUID
	}
	return ""
}

func (x *Volume) GetUseType() string {
	if x != nil {
		return x.UseType
	}
	return ""
}

func (x *Volume) GetUser_UUID() string {
	if x != nil {
		return x.User_UUID
	}
	return ""
}

func (x *Volume) GetCreateAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *Volume) GetNetwork_IP() string {
	if x != nil {
		return x.Network_IP
	}
	return ""
}

type VolumeAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Volume_UUID string               `protobuf:"bytes,2,opt,name=volume_UUID,json=volumeUUID,proto3" json:"volume_UUID,omitempty"`
	Server_UUID string               `protobuf:"bytes,3,opt,name=server_UUID,json=serverUUID,proto3" json:"server_UUID,omitempty"`
	CreateAt    *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt    *timestamp.Timestamp `protobuf:"bytes,5,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *VolumeAttachment) Reset() {
	*x = VolumeAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeAttachment) ProtoMessage() {}

func (x *VolumeAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeAttachment.ProtoReflect.Descriptor instead.
func (*VolumeAttachment) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{6}
}

func (x *VolumeAttachment) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *VolumeAttachment) GetVolume_UUID() string {
	if x != nil {
		return x.Volume_UUID
	}
	return ""
}

func (x *VolumeAttachment) GetServer_UUID() string {
	if x != nil {
		return x.Server_UUID
	}
	return ""
}

func (x *VolumeAttachment) GetCreateAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *VolumeAttachment) GetUpdateAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

type Ipmi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *Ipmi) Reset() {
	*x = Ipmi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipmi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipmi) ProtoMessage() {}

func (x *Ipmi) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipmi.ProtoReflect.Descriptor instead.
func (*Ipmi) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{7}
}

func (x *Ipmi) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type AdaptiveIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtIface_IPAddress string `protobuf:"bytes,1,opt,name=ext_iface_IP_address,json=extIfaceIPAddress,proto3" json:"ext_iface_IP_address,omitempty"`
	Netmask            string `protobuf:"bytes,2,opt,name=netmask,proto3" json:"netmask,omitempty"`
	GatewayAddress     string `protobuf:"bytes,3,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
	Strat_IPAddress    string `protobuf:"bytes,4,opt,name=strat_IP_address,json=stratIPAddress,proto3" json:"strat_IP_address,omitempty"`
	End_IPAddress      string `protobuf:"bytes,5,opt,name=end_IP_address,json=endIPAddress,proto3" json:"end_IP_address,omitempty"`
}

func (x *AdaptiveIP) Reset() {
	*x = AdaptiveIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveIP) ProtoMessage() {}

func (x *AdaptiveIP) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveIP.ProtoReflect.Descriptor instead.
func (*AdaptiveIP) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{8}
}

func (x *AdaptiveIP) GetExtIface_IPAddress() string {
	if x != nil {
		return x.ExtIface_IPAddress
	}
	return ""
}

func (x *AdaptiveIP) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *AdaptiveIP) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

func (x *AdaptiveIP) GetStrat_IPAddress() string {
	if x != nil {
		return x.Strat_IPAddress
	}
	return ""
}

func (x *AdaptiveIP) GetEnd_IPAddress() string {
	if x != nil {
		return x.End_IPAddress
	}
	return ""
}

type AdaptiveIPServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server_UUID    string               `protobuf:"bytes,1,opt,name=server_UUID,json=serverUUID,proto3" json:"server_UUID,omitempty"`
	Public_IP      string               `protobuf:"bytes,2,opt,name=public_IP,json=publicIP,proto3" json:"public_IP,omitempty"`
	Private_IP     string               `protobuf:"bytes,3,opt,name=private_IP,json=privateIP,proto3" json:"private_IP,omitempty"`
	PrivateGateway string               `protobuf:"bytes,4,opt,name=private_gateway,json=privateGateway,proto3" json:"private_gateway,omitempty"`
	Status         string               `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	CreateAt       *timestamp.Timestamp `protobuf:"bytes,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (x *AdaptiveIPServer) Reset() {
	*x = AdaptiveIPServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveIPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveIPServer) ProtoMessage() {}

func (x *AdaptiveIPServer) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveIPServer.ProtoReflect.Descriptor instead.
func (*AdaptiveIPServer) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{9}
}

func (x *AdaptiveIPServer) GetServer_UUID() string {
	if x != nil {
		return x.Server_UUID
	}
	return ""
}

func (x *AdaptiveIPServer) GetPublic_IP() string {
	if x != nil {
		return x.Public_IP
	}
	return ""
}

func (x *AdaptiveIPServer) GetPrivate_IP() string {
	if x != nil {
		return x.Private_IP
	}
	return ""
}

func (x *AdaptiveIPServer) GetPrivateGateway() string {
	if x != nil {
		return x.PrivateGateway
	}
	return ""
}

func (x *AdaptiveIPServer) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AdaptiveIPServer) GetCreateAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID            string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Network_IP      string               `protobuf:"bytes,2,opt,name=network_IP,json=networkIP,proto3" json:"network_IP,omitempty"`
	Netmask         string               `protobuf:"bytes,3,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Gateway         string               `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	NextServer      string               `protobuf:"bytes,5,opt,name=next_server,json=nextServer,proto3" json:"next_server,omitempty"`
	NameServer      string               `protobuf:"bytes,6,opt,name=name_server,json=nameServer,proto3" json:"name_server,omitempty"`
	DomainName      string               `protobuf:"bytes,7,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	Server_UUID     string               `protobuf:"bytes,8,opt,name=server_UUID,json=serverUUID,proto3" json:"server_UUID,omitempty"`
	LeaderNode_UUID string               `protobuf:"bytes,9,opt,name=leader_node_UUID,json=leaderNodeUUID,proto3" json:"leader_node_UUID,omitempty"`
	OS              string               `protobuf:"bytes,10,opt,name=OS,proto3" json:"OS,omitempty"`
	SubnetName      string               `protobuf:"bytes,11,opt,name=subnet_name,json=subnetName,proto3" json:"subnet_name,omitempty"`
	CreateAt        *timestamp.Timestamp `protobuf:"bytes,12,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{10}
}

func (x *Subnet) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Subnet) GetNetwork_IP() string {
	if x != nil {
		return x.Network_IP
	}
	return ""
}

func (x *Subnet) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *Subnet) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Subnet) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *Subnet) GetNameServer() string {
	if x != nil {
		return x.NameServer
	}
	return ""
}

func (x *Subnet) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *Subnet) GetServer_UUID() string {
	if x != nil {
		return x.Server_UUID
	}
	return ""
}

func (x *Subnet) GetLeaderNode_UUID() string {
	if x != nil {
		return x.LeaderNode_UUID
	}
	return ""
}

func (x *Subnet) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *Subnet) GetSubnetName() string {
	if x != nil {
		return x.SubnetName
	}
	return ""
}

func (x *Subnet) GetCreateAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

type Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Series) Reset() {
	*x = Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{11}
}

func (x *Series) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Series) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Telegraf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric    string    `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	SubMetric string    `protobuf:"bytes,2,opt,name=sub_metric,json=subMetric,proto3" json:"sub_metric,omitempty"`
	UUID      string    `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Series    []*Series `protobuf:"bytes,4,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *Telegraf) Reset() {
	*x = Telegraf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telegraf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telegraf) ProtoMessage() {}

func (x *Telegraf) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telegraf.ProtoReflect.Descriptor instead.
func (*Telegraf) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{12}
}

func (x *Telegraf) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *Telegraf) GetSubMetric() string {
	if x != nil {
		return x.SubMetric
	}
	return ""
}

func (x *Telegraf) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Telegraf) GetSeries() []*Series {
	if x != nil {
		return x.Series
	}
	return nil
}

type Control struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HccCommand  string `protobuf:"bytes,1,opt,name=hcc_command,json=hccCommand,proto3" json:"hcc_command,omitempty"`
	Hcc_IPRange string `protobuf:"bytes,2,opt,name=hcc_IP_range,json=hccIPRange,proto3" json:"hcc_IP_range,omitempty"`
	Server_UUID string `protobuf:"bytes,3,opt,name=server_UUID,json=serverUUID,proto3" json:"server_UUID,omitempty"`
}

func (x *Control) Reset() {
	*x = Control{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Control) ProtoMessage() {}

func (x *Control) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Control.ProtoReflect.Descriptor instead.
func (*Control) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{13}
}

func (x *Control) GetHccCommand() string {
	if x != nil {
		return x.HccCommand
	}
	return ""
}

func (x *Control) GetHcc_IPRange() string {
	if x != nil {
		return x.Hcc_IPRange
	}
	return ""
}

func (x *Control) GetServer_UUID() string {
	if x != nil {
		return x.Server_UUID
	}
	return ""
}

type Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server_UUID   string `protobuf:"bytes,1,opt,name=server_UUID,json=serverUUID,proto3" json:"server_UUID,omitempty"`
	CPU           int32  `protobuf:"varint,2,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Memory        int32  `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	NumberOfNodes int32  `protobuf:"varint,4,opt,name=number_of_nodes,json=numberOfNodes,proto3" json:"number_of_nodes,omitempty"`
}

func (x *Quota) Reset() {
	*x = Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgType_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota) ProtoMessage() {}

func (x *Quota) ProtoReflect() protoreflect.Message {
	mi := &file_msgType_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota.ProtoReflect.Descriptor instead.
func (*Quota) Descriptor() ([]byte, []int) {
	return file_msgType_proto_rawDescGZIP(), []int{14}
}

func (x *Quota) GetServer_UUID() string {
	if x != nil {
		return x.Server_UUID
	}
	return ""
}

func (x *Quota) GetCPU() int32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *Quota) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Quota) GetNumberOfNodes() int32 {
	if x != nil {
		return x.NumberOfNodes
	}
	return 0
}

var File_msgType_proto protoreflect.FileDescriptor

var file_msgType_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x02, 0x0a, 0x04, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6d, 0x63, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6d,
	0x63, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6d, 0x63, 0x5f,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6d, 0x63, 0x49, 0x70, 0x12,
	0x20, 0x0a, 0x0c, 0x50, 0x58, 0x45, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x58, 0x45, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x43,
	0x50, 0x55, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x43, 0x50, 0x55, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x22, 0x8a,
	0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x43, 0x50,
	0x55, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x50, 0x55, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x43, 0x50, 0x55, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x43, 0x50, 0x55, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x43, 0x50, 0x55, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x43, 0x50, 0x55, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x06,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x4f,
	0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a,
	0x03, 0x43, 0x50, 0x55, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x9a, 0x01, 0x0a,
	0x03, 0x56, 0x4e, 0x43, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56,
	0x4e, 0x43, 0x2e, 0x56, 0x4e, 0x43, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x09, 0x56, 0x4e, 0x43, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x22, 0x81, 0x02, 0x0a, 0x06, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x55, 0x55, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x49, 0x50, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x50, 0x22, 0xda, 0x01,
	0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x1a, 0x0a, 0x04, 0x49, 0x70,
	0x6d, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0xd0, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x50, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x49, 0x50, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b,
	0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x5f, 0x49, 0x50, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x49, 0x50, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x87, 0x03, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x4f, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22,
	0x32, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x7e, 0x0a, 0x08, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x66, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x63, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x63, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x68, 0x63, 0x63, 0x5f, 0x49, 0x50, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x63, 0x63, 0x49, 0x50, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55,
	0x49, 0x44, 0x22, 0x7a, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x43, 0x50, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x22,
	0x5a, 0x20, 0x68, 0x63, 0x63, 0x2f, 0x66, 0x6c, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x6d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msgType_proto_rawDescOnce sync.Once
	file_msgType_proto_rawDescData = file_msgType_proto_rawDesc
)

func file_msgType_proto_rawDescGZIP() []byte {
	file_msgType_proto_rawDescOnce.Do(func() {
		file_msgType_proto_rawDescData = protoimpl.X.CompressGZIP(file_msgType_proto_rawDescData)
	})
	return file_msgType_proto_rawDescData
}

var file_msgType_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_msgType_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_msgType_proto_goTypes = []interface{}{
	(VNC_VNCAction)(0),          // 0: MsgType.VNC.VNCAction
	(*Node)(nil),                // 1: MsgType.Node
	(*NodeDetail)(nil),          // 2: MsgType.NodeDetail
	(*Server)(nil),              // 3: MsgType.Server
	(*ServerNode)(nil),          // 4: MsgType.ServerNode
	(*VNC)(nil),                 // 5: MsgType.VNC
	(*Volume)(nil),              // 6: MsgType.Volume
	(*VolumeAttachment)(nil),    // 7: MsgType.VolumeAttachment
	(*Ipmi)(nil),                // 8: MsgType.Ipmi
	(*AdaptiveIP)(nil),          // 9: MsgType.AdaptiveIP
	(*AdaptiveIPServer)(nil),    // 10: MsgType.AdaptiveIPServer
	(*Subnet)(nil),              // 11: MsgType.Subnet
	(*Series)(nil),              // 12: MsgType.Series
	(*Telegraf)(nil),            // 13: MsgType.Telegraf
	(*Control)(nil),             // 14: MsgType.Control
	(*Quota)(nil),               // 15: MsgType.Quota
	(*timestamp.Timestamp)(nil), // 16: google.protobuf.Timestamp
}
var file_msgType_proto_depIdxs = []int32{
	16, // 0: MsgType.Node.create_at:type_name -> google.protobuf.Timestamp
	16, // 1: MsgType.Server.create_at:type_name -> google.protobuf.Timestamp
	16, // 2: MsgType.ServerNode.create_at:type_name -> google.protobuf.Timestamp
	0,  // 3: MsgType.VNC.action:type_name -> MsgType.VNC.VNCAction
	16, // 4: MsgType.Volume.create_at:type_name -> google.protobuf.Timestamp
	16, // 5: MsgType.VolumeAttachment.create_at:type_name -> google.protobuf.Timestamp
	16, // 6: MsgType.VolumeAttachment.update_at:type_name -> google.protobuf.Timestamp
	16, // 7: MsgType.AdaptiveIPServer.create_at:type_name -> google.protobuf.Timestamp
	16, // 8: MsgType.Subnet.create_at:type_name -> google.protobuf.Timestamp
	12, // 9: MsgType.Telegraf.series:type_name -> MsgType.Series
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_msgType_proto_init() }
func file_msgType_proto_init() {
	if File_msgType_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msgType_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipmi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveIPServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telegraf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Control); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgType_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msgType_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msgType_proto_goTypes,
		DependencyIndexes: file_msgType_proto_depIdxs,
		EnumInfos:         file_msgType_proto_enumTypes,
		MessageInfos:      file_msgType_proto_msgTypes,
	}.Build()
	File_msgType_proto = out.File
	file_msgType_proto_rawDesc = nil
	file_msgType_proto_goTypes = nil
	file_msgType_proto_depIdxs = nil
}
